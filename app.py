import streamlit as st
import pandas as pd
import numpy as np
import json
import base64
import requests
from datetime import datetime, date
from sqlalchemy import create_engine, text, inspect, MetaData, Table, Column, Integer, String, Text, DateTime, Float
from sqlalchemy.exc import SQLAlchemyError
import pymysql
import os
import time

# Configuration
st.set_page_config(
    page_title="NTOneEmbedding System",
    page_icon="üöÄ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î environment variables ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Streamlit Cloud
# Streamlit Cloud ‡∏à‡∏∞‡πÉ‡∏ä‡πâ secrets management ‡πÅ‡∏ó‡∏ô .env file
try:
    TIDB_URL = st.secrets.get("TIDB_URL") or os.environ.get("TIDB_URL")
    EMBEDDING_API_URL = st.secrets.get("EMBEDDING_API_URL") or os.environ.get("EMBEDDING_API_URL", "http://209.15.123.47:11434/api/embeddings")
    EMBEDDING_MODEL = st.secrets.get("EMBEDDING_MODEL") or os.environ.get("EMBEDDING_MODEL", "nomic-embed-text:latest")
except:
    # Fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡πÉ‡∏ô local
    TIDB_URL = os.environ.get("TIDB_URL")
    EMBEDDING_API_URL = os.environ.get("EMBEDDING_API_URL", "http://209.15.123.47:11434/api/embeddings")
    EMBEDDING_MODEL = os.environ.get("EMBEDDING_MODEL", "nomic-embed-text:latest")

# Modern CSS with Enhanced Sidebar and Dark/Neon Theme
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');
    
    /* Global Dark Theme */
    .stApp {
        background: linear-gradient(135deg, #0a0e27 0%, #1a1d3a 100%);
        color: #e1e5f1;
    }
    
    .main {
        font-family: 'Inter', sans-serif;
        background: transparent;
    }
    
    /* Enhanced Sidebar */
    .css-1d391kg, .css-1rs6os, .stSidebar {
        background: linear-gradient(180deg, #0f172a 0%, #1e293b 50%, #334155 100%) !important;
        border-right: 2px solid #3b82f6 !important;
        box-shadow: 5px 0 20px rgba(59, 130, 246, 0.1) !important;
    }
    
    /* Header */
    .main-header {
        background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 25%, #06b6d4 50%, #0ea5e9 75%, #2563eb 100%);
        padding: 3rem 2rem;
        border-radius: 24px;
        margin-bottom: 2rem;
        text-align: center;
        box-shadow: 0 20px 60px rgba(37, 99, 235, 0.3), 0 0 0 1px rgba(59, 130, 246, 0.2);
        position: relative;
        overflow: hidden;
        border: 1px solid rgba(59, 130, 246, 0.3);
    }
    
    .main-header h1 {
        color: #ffffff;
        margin: 0;
        text-shadow: 0 0 20px rgba(59, 130, 246, 0.5);
        font-weight: 800;
        font-size: 2.8rem;
        position: relative;
        z-index: 2;
        background: linear-gradient(45deg, #ffffff, #e1e5f1, #ffffff);
        background-clip: text;
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        letter-spacing: -0.02em;
    }
    
    /* Status Indicators */
    .status-indicator {
        display: inline-block;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        margin-right: 0.5rem;
        animation: pulse 2s infinite;
    }
    
    .status-running {
        background: #10b981;
        box-shadow: 0 0 10px rgba(16, 185, 129, 0.5);
    }
    
    .status-waiting {
        background: #f59e0b;
        box-shadow: 0 0 10px rgba(245, 158, 11, 0.5);
    }
    
    .status-complete {
        background: #3b82f6;
        box-shadow: 0 0 10px rgba(59, 130, 246, 0.5);
    }
    
    @keyframes pulse {
        0%, 100% { opacity: 1; transform: scale(1); }
        50% { opacity: 0.5; transform: scale(1.1); }
    }
    
    /* Success Box */
    .success-box {
        background: linear-gradient(135deg, #065f46 0%, #047857 100%);
        border: 1px solid #10b981;
        color: #d1fae5;
        padding: 1.5rem;
        border-radius: 16px;
        margin: 1rem 0;
        box-shadow: 0 10px 30px rgba(16, 185, 129, 0.2), 0 0 0 1px rgba(16, 185, 129, 0.1);
    }
    
    /* Error Box */
    .error-box {
        background: linear-gradient(135deg, #7f1d1d 0%, #991b1b 100%);
        border: 1px solid #ef4444;
        color: #fecaca;
        padding: 1.5rem;
        border-radius: 16px;
        margin: 1rem 0;
        box-shadow: 0 10px 30px rgba(239, 68, 68, 0.2), 0 0 0 1px rgba(239, 68, 68, 0.1);
    }
    
    /* Info Box */
    .info-box {
        background: linear-gradient(135deg, #1e40af 0%, #2563eb 100%);
        border: 1px solid #3b82f6;
        color: #dbeafe;
        padding: 1.5rem;
        border-radius: 16px;
        margin: 1rem 0;
        box-shadow: 0 10px 30px rgba(59, 130, 246, 0.2), 0 0 0 1px rgba(59, 130, 246, 0.1);
    }
    
    /* Buttons */
    .stButton > button {
        background: linear-gradient(135deg, #3b82f6 0%, #2563eb 50%, #1d4ed8 100%);
        color: white;
        border: none;
        border-radius: 12px;
        padding: 0.75rem 2rem;
        font-weight: 600;
        font-family: 'Inter', sans-serif;
        box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3), 0 0 0 1px rgba(59, 130, 246, 0.2);
        transition: all 0.3s ease;
    }
</style>
""", unsafe_allow_html=True)

class DatabaseManager:
    def __init__(self):
        self.engine = None
        self.connect_to_database()
    
    def connect_to_database(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö TiDB Database"""
        try:
            if not TIDB_URL:
                st.error("‚ùå TIDB_URL ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô environment variables")
                return False
            
            self.engine = create_engine(TIDB_URL, pool_pre_ping=True, pool_recycle=300)
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            with self.engine.connect() as conn:
                conn.execute(text("SELECT 1"))
            
            return True
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database ‡πÑ‡∏î‡πâ: {str(e)}")
            return False
    
    def get_existing_tables(self):
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ tables ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"""
        try:
            with self.engine.connect() as conn:
                result = conn.execute(text("SHOW TABLES"))
                tables = [row[0] for row in result.fetchall()]
                return tables
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ tables ‡πÑ‡∏î‡πâ: {str(e)}")
            return []
    
    def get_table_columns(self, table_name):
        """‡∏î‡∏∂‡∏á columns ‡∏Ç‡∏≠‡∏á table ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
        try:
            inspector = inspect(self.engine)
            columns = inspector.get_columns(table_name)
            return columns
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á columns ‡∏Ç‡∏≠‡∏á table {table_name} ‡πÑ‡∏î‡πâ: {str(e)}")
            return []

    def get_table_data_sample(self, table_name, limit=5):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å table"""
        try:
            with self.engine.connect() as conn:
                result = conn.execute(text(f"SELECT * FROM {table_name} LIMIT {limit}"))
                data = result.fetchall()
                columns = result.keys()
                return data, columns
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ: {str(e)}")
            return [], []

    def create_new_table(self, table_name, columns_config):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á table ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏° configuration ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        try:
            metadata = MetaData()
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á columns ‡∏ï‡∏≤‡∏° config
            table_columns = []
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° ID column ‡πÄ‡∏õ‡πá‡∏ô primary key ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠
            table_columns.append(Column('id', Integer, primary_key=True, autoincrement=True))
            
            for col_config in columns_config:
                col_name = col_config['name']
                col_type = col_config['type']
                col_nullable = col_config['nullable']
                
                # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á id column ‡∏ã‡πâ‡∏≥
                if col_name.lower() == 'id':
                    continue
                
                if col_type == 'Integer':
                    column = Column(col_name, Integer, nullable=col_nullable)
                elif col_type == 'String':
                    column = Column(col_name, String(255), nullable=col_nullable)
                elif col_type == 'Text':
                    column = Column(col_name, Text, nullable=col_nullable)
                elif col_type == 'Float':
                    column = Column(col_name, Float, nullable=col_nullable)
                elif col_type == 'DateTime':
                    column = Column(col_name, DateTime, nullable=col_nullable)
                
                table_columns.append(column)
            
            table = Table(table_name, metadata, *table_columns)
            metadata.create_all(self.engine)
            
            return True
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á table {table_name} ‡πÑ‡∏î‡πâ: {str(e)}")
            return False

    def insert_data_from_csv(self, table_name, df):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å DataFrame ‡πÄ‡∏Ç‡πâ‡∏≤ table"""
        try:
            success_count = 0
            error_count = 0
            errors = []
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á progress bar
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            total_rows = len(df)
            
            with self.engine.begin() as conn:
                for index, row in df.iterrows():
                    try:
                        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô dict ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ columns ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà id
                        row_dict = {k: v for k, v in row.to_dict().items() if k.lower() != 'id'}
                        
                        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• NaN ‡πÅ‡∏•‡∏∞ None
                        for key, value in row_dict.items():
                            if pd.isna(value):
                                row_dict[key] = None
                        
                        # ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL insert statement (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° id ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô AUTO_INCREMENT)
                        columns = ', '.join(row_dict.keys())
                        placeholders = ', '.join([f':{key}' for key in row_dict.keys()])
                        
                        sql = f"INSERT INTO {table_name} ({columns}) VALUES ({placeholders})"
                        conn.execute(text(sql), row_dict)
                        
                        success_count += 1
                        
                    except Exception as e:
                        error_count += 1
                        errors.append(f"‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà {index + 1}: {str(e)}")
                    
                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó progress
                    progress = (index + 1) / total_rows
                    progress_bar.progress(progress)
                    status_text.text(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {index + 1}/{total_rows}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ
            progress_bar.empty()
            status_text.empty()
            
            return success_count, error_count, errors
            
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {str(e)}")
            return 0, len(df), [str(e)]

def generate_csv_template(table_name, db_manager):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á CSV template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö table ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
    try:
        columns = db_manager.get_table_columns(table_name)
        column_names = [col['name'] for col in columns if col['name'].lower() != 'id']
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á sample data
        sample_data = {}
        for col in columns:
            if col['name'].lower() == 'id':
                continue
            col_name = col['name']
            col_type = str(col['type']).lower()
            
            if 'varchar' in col_type or 'text' in col_type:
                sample_data[col_name] = f"‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á{col_name}"
            elif 'int' in col_type:
                sample_data[col_name] = 123
            elif 'float' in col_type or 'decimal' in col_type:
                sample_data[col_name] = 123.45
            elif 'date' in col_type or 'timestamp' in col_type:
                sample_data[col_name] = "2024-01-01"
            else:
                sample_data[col_name] = f"‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á{col_name}"
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame template
        template_df = pd.DataFrame([sample_data])
        return template_df, column_names
    
    except Exception as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á template ‡πÑ‡∏î‡πâ: {str(e)}")
        return None, None

def check_api_status():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ API ‡πÅ‡∏•‡∏∞ Server"""
    status = {
        'database': {'status': False, 'message': '', 'color': 'red'},
        'embedding_api': {'status': False, 'message': '', 'color': 'red'}
    }
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Database
    try:
        if st.session_state.db_manager and st.session_state.db_manager.engine:
            with st.session_state.db_manager.engine.connect() as conn:
                conn.execute(text("SELECT 1"))
            status['database']['status'] = True
            status['database']['message'] = "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
            status['database']['color'] = 'green'
        else:
            status['database']['message'] = "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"
    except Exception as e:
        status['database']['message'] = f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)[:30]}..."
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Embedding API
    try:
        test_payload = {
            "model": EMBEDDING_MODEL,
            "prompt": "test"
        }
        response = requests.post(EMBEDDING_API_URL, json=test_payload, timeout=5)
        if response.status_code == 200:
            result = response.json()
            if "embedding" in result:
                status['embedding_api']['status'] = True
                status['embedding_api']['message'] = "API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
                status['embedding_api']['color'] = 'green'
            else:
                status['embedding_api']['message'] = "API ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥"
        else:
            status['embedding_api']['message'] = f"HTTP {response.status_code}"
    except requests.exceptions.Timeout:
        status['embedding_api']['message'] = "API Timeout"
    except requests.exceptions.ConnectionError:
        status['embedding_api']['message'] = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"
    except Exception as e:
        status['embedding_api']['message'] = f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)[:20]}..."
    
    return status

def show_create_table_interface():
    """‡πÅ‡∏™‡∏î‡∏á interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á table ‡πÉ‡∏´‡∏°‡πà"""
    st.markdown("""
    <div class="info-box">
        <h3>üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á Table ‡πÉ‡∏´‡∏°‡πà</h3>
        <p>‡∏™‡∏£‡πâ‡∏≤‡∏á database table ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Input ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠ table
    table_name = st.text_input("üè∑Ô∏è ‡∏ä‡∏∑‡πà‡∏≠ Table:", placeholder="‡πÄ‡∏ä‡πà‡∏ô users, products, etc.")
    
    if table_name:
        st.markdown("### üìã ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Columns")
        
        # ‡πÄ‡∏Å‡πá‡∏ö columns configuration ‡πÉ‡∏ô session state
        if f"columns_config_{table_name}" not in st.session_state:
            st.session_state[f"columns_config_{table_name}"] = []
        
        # Form ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° column
        with st.form(f"add_column_{table_name}"):
            col1, col2, col3 = st.columns([2, 2, 1])
            
            with col1:
                col_name = st.text_input("Column Name")
            with col2:
                col_type = st.selectbox("Data Type", 
                                      ["String", "Integer", "Float", "Text", "DateTime"])
            with col3:
                col_nullable = st.checkbox("Nullable", value=True)
            
            if st.form_submit_button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° Column"):
                if col_name:
                    st.session_state[f"columns_config_{table_name}"].append({
                        "name": col_name,
                        "type": col_type,
                        "nullable": col_nullable
                    })
                    st.success(f"‡πÄ‡∏û‡∏¥‡πà‡∏° column '{col_name}' ‡πÅ‡∏•‡πâ‡∏ß")
        
        # ‡πÅ‡∏™‡∏î‡∏á columns ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß
        if st.session_state[f"columns_config_{table_name}"]:
            st.markdown("#### üìä Columns ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß:")
            
            for i, col in enumerate(st.session_state[f"columns_config_{table_name}"]):
                col_display1, col_display2 = st.columns([4, 1])
                with col_display1:
                    st.text(f"üìå {col['name']} ({col['type']}) - {'NULL' if col['nullable'] else 'NOT NULL'}")
                with col_display2:
                    if st.button("üóëÔ∏è", key=f"remove_{table_name}_{i}"):
                        st.session_state[f"columns_config_{table_name}"].pop(i)
                        st.rerun()
            
            # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á table
            if st.button("üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á Table", type="primary"):
                if st.session_state.db_manager.create_new_table(
                    table_name, 
                    st.session_state[f"columns_config_{table_name}"]
                ):
                    st.markdown(f"""
                    <div class="success-box">
                        <h3>‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Table ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h3>
                        <p>Table '{table_name}' ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï configuration
                    del st.session_state[f"columns_config_{table_name}"]

def show_select_table_interface():
    """‡πÅ‡∏™‡∏î‡∏á interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å table ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà"""
    st.markdown("""
    <div class="info-box">
        <h3>üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Table ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà</h3>
        <p>‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ tables ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</p>
    </div>
    """, unsafe_allow_html=True)
    
    tables = st.session_state.db_manager.get_existing_tables()
    
    if tables:
        selected_table = st.selectbox("üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Table:", options=tables)
        
        if selected_table:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• table
            columns = st.session_state.db_manager.get_table_columns(selected_table)
            data, column_names = st.session_state.db_manager.get_table_data_sample(selected_table)
            
            # ‡πÅ‡∏™‡∏î‡∏á schema
            st.markdown(f"### üèóÔ∏è Schema ‡∏Ç‡∏≠‡∏á {selected_table}")
            schema_data = []
            for col in columns:
                schema_data.append({
                    "Column": col['name'],
                    "Type": str(col['type']),
                    "Nullable": "YES" if col['nullable'] else "NO"
                })
            
            st.dataframe(pd.DataFrame(schema_data), use_container_width=True)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
            if data:
                st.markdown(f"### üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ({len(data)} ‡πÅ‡∏ñ‡∏ß)")
                sample_df = pd.DataFrame(data, columns=column_names)
                st.dataframe(sample_df, use_container_width=True)
            else:
                st.info("Table ‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    else:
        st.markdown("""
        <div class="error-box">
            <h3>‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Tables</h3>
            <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ tables ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á table ‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô</p>
        </div>
        """, unsafe_allow_html=True)

def show_upload_csv_interface():
    """‡πÅ‡∏™‡∏î‡∏á interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö upload CSV ‡∏û‡∏£‡πâ‡∏≠‡∏° template"""
    st.markdown("""
    <div class="info-box">
        <h3>üìÅ Upload CSV File</h3>
        <p>‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤ table</p>
    </div>
    """, unsafe_allow_html=True)
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å table ‡∏ó‡∏µ‡πà‡∏à‡∏∞ insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    tables = st.session_state.db_manager.get_existing_tables()
    
    if tables:
        target_table = st.selectbox("üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Target Table:", options=tables)
        
        if target_table:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô Template Download
            st.markdown("### üìã ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV Template")
            
            col1, col2 = st.columns([2, 1])
            with col1:
                st.info("üí° ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î template CSV ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á table")
            
            with col2:
                if st.button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Template", type="secondary"):
                    template_df, column_names = generate_csv_template(target_table, st.session_state.db_manager)
                    
                    if template_df is not None:
                        # ‡πÅ‡∏õ‡∏•‡∏á DataFrame ‡πÄ‡∏õ‡πá‡∏ô CSV
                        csv_data = template_df.to_csv(index=False, encoding='utf-8-sig')
                        
                        st.download_button(
                            label="üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå Template",
                            data=csv_data,
                            file_name=f"{target_table}_template.csv",
                            mime="text/csv",
                            key=f"download_{target_table}"
                        )
                        
                        st.success("‚úÖ Template ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î!")
                        
                        # ‡πÅ‡∏™‡∏î‡∏á preview template
                        st.markdown("#### üëÅÔ∏è ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Template:")
                        st.dataframe(template_df, use_container_width=True)
            
            st.markdown("---")
        
        # Upload file section
        uploaded_file = st.file_uploader("üì§ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV", type=['csv'])
        
        if uploaded_file and target_table:
            try:
                # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV
                df = pd.read_csv(uploaded_file)
                
                st.markdown(f"### üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô CSV ({len(df)} ‡πÅ‡∏ñ‡∏ß)")
                st.dataframe(df.head(10), use_container_width=True)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö columns
                table_columns = st.session_state.db_manager.get_table_columns(target_table)
                table_column_names = [col['name'] for col in table_columns]
                
                st.markdown("### üîç ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Columns")
                
                csv_columns = list(df.columns)
                matching_columns = set(csv_columns) & set(table_column_names)
                missing_columns = set(table_column_names) - set(csv_columns)
                extra_columns = set(csv_columns) - set(table_column_names)
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.success(f"‚úÖ ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô: {len(matching_columns)}")
                with col2:
                    if missing_columns:
                        st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô CSV: {len(missing_columns)}")
                    else:
                        st.info("üìã ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
                with col3:
                    if extra_columns:
                        st.info(f"üìé ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: {len(extra_columns)}")
                    else:
                        st.info("üéØ ‡∏û‡∏≠‡∏î‡∏µ")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î columns
                if missing_columns:
                    st.warning(f"Columns ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô CSV: {', '.join(missing_columns)}")
                if extra_columns:
                    st.info(f"Columns ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô CSV: {', '.join(extra_columns)}")
                
                # ‡∏õ‡∏∏‡πà‡∏° import
                if st.button("üöÄ Import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", type="primary"):
                    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
                        success_count, error_count, errors = st.session_state.db_manager.insert_data_from_csv(
                            target_table, df
                        )
                    
                    if success_count > 0:
                        st.markdown(f"""
                        <div class="success-box">
                            <h3>‚úÖ Import ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h3>
                            <p>Import ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_count:,} ‡πÅ‡∏ñ‡∏ß</p>
                            <p>Error: {error_count:,} ‡πÅ‡∏ñ‡∏ß</p>
                        </div>
                        """, unsafe_allow_html=True)
                    else:
                        st.markdown("""
                        <div class="error-box">
                            <h3>‚ùå Import ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</h3>
                            <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
                        </div>
                        """, unsafe_allow_html=True)
                    
                    # ‡πÅ‡∏™‡∏î‡∏á errors ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                    if errors and len(errors) <= 10:
                        st.error("Errors:")
                        for error in errors:
                            st.text(error)
            
            except Exception as e:
                st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡πÑ‡∏î‡πâ: {str(e)}")
    else:
        st.markdown("""
        <div class="error-box">
            <h3>‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Tables</h3>
            <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ tables ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á table ‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô</p>
        </div>
        """, unsafe_allow_html=True)

def show_embedding_interface():
    """‡πÅ‡∏™‡∏î‡∏á interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö embedding process"""
    st.markdown("""
    <div class="info-box">
        <h3>ü§ñ Run Embedding Process</h3>
        <p>‡∏™‡∏£‡πâ‡∏≤‡∏á vector embeddings ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</p>
    </div>
    """, unsafe_allow_html=True)
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å table ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö embedding
    tables = st.session_state.db_manager.get_existing_tables()
    
    if tables:
        selected_table = st.selectbox("üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Table:", options=tables)
        
        if selected_table:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• columns ‡∏Ç‡∏≠‡∏á table ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            columns = st.session_state.db_manager.get_table_columns(selected_table)
            column_names = [col['name'] for col in columns]
            
            # ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å column ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á embedding
            text_columns = []
            for col in columns:
                col_type = str(col['type']).lower()
                # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ columns ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô text/string
                if any(t in col_type for t in ['varchar', 'text', 'char', 'string']):
                    text_columns.append(col['name'])
            
            if text_columns:
                source_column = st.selectbox("üìù ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Column ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Embedding:", 
                                           options=text_columns, 
                                           help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å column ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á vector embeddings")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• table
                data, column_names = st.session_state.db_manager.get_table_data_sample(selected_table)
                
                if data:
                    st.markdown(f"### üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å {selected_table}")
                    sample_df = pd.DataFrame(data, columns=column_names)
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ columns ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (id, source column, ‡πÅ‡∏•‡∏∞ columns ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á)
                    display_columns = ['id'] if 'id' in sample_df.columns else []
                    if source_column in sample_df.columns:
                        display_columns.append(source_column)
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏° columns ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 columns ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    other_cols = [col for col in sample_df.columns if col not in display_columns][:3]
                    display_columns.extend(other_cols)
                    
                    st.dataframe(sample_df[display_columns], use_container_width=True)
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    try:
                        with st.session_state.db_manager.engine.connect() as conn:
                            count_result = conn.execute(text(f"SELECT COUNT(*) FROM {selected_table}"))
                            total_count = count_result.scalar()
                            
                            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö embedding table ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
                            embedding_table = f"{selected_table}_vectors"
                            embed_count = 0
                            try:
                                embed_result = conn.execute(text(f"SELECT COUNT(*) FROM {embedding_table}"))
                                embed_count = embed_result.scalar()
                            except:
                                embed_count = 0
                            
                            col1, col2, col3 = st.columns(3)
                            with col1:
                                st.metric("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"{total_count:,}")
                            with col2:
                                st.metric("‚úÖ Embedded ‡πÅ‡∏•‡πâ‡∏ß", f"{embed_count:,}")
                            with col3:
                                remaining = total_count - embed_count
                                st.metric("‚è≥ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", f"{remaining:,}")
                    
                    except Exception as e:
                        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÑ‡∏î‡πâ: {str(e)}")
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
                    st.markdown("### ‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Embedding")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        batch_size = st.number_input("Batch Size", min_value=1, max_value=1000, value=100)
                    with col2:
                        max_records = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•", 
                                                    min_value=1, max_value=10000, value=1000)
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API
                    st.markdown("### üîó API Configuration")
                    st.text(f"API URL: {EMBEDDING_API_URL}")
                    st.text(f"Model: {EMBEDDING_MODEL}")
                    st.text(f"Source Column: {source_column}")
                    
                    # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
                    if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á Embeddings", type="primary"):
                        run_embedding_process(selected_table, batch_size, max_records, source_column)
                        
                else:
                    st.info("Table ‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                    
            else:
                st.markdown("""
                <div class="error-box">
                    <h3>‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Text Column ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°</h3>
                    <p>Table ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ column ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó text/varchar ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings ‡πÑ‡∏î‡πâ</p>
                    <p>Columns ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà: {}</p>
                </div>
                """.format(', '.join(column_names)), unsafe_allow_html=True)
    else:
        st.markdown("""
        <div class="error-box">
            <h3>‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Tables</h3>
            <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ tables ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á table ‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô</p>
        </div>
        """, unsafe_allow_html=True)


def run_embedding_process(table_name, batch_size, max_records, source_column):
    """‡∏£‡∏±‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings"""
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á embedding table
        embedding_table = f"{table_name}_vectors"
        
        with st.session_state.db_manager.engine.connect() as conn:
            conn.execute(text(f"""
                CREATE TABLE IF NOT EXISTS {embedding_table} (
                    id INT PRIMARY KEY,
                    source_text TEXT,
                    embedding LONGBLOB,
                    metadata JSON,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    INDEX idx_created_at (created_at)
                )
            """))
            conn.commit()
        
        st.success(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á table {embedding_table} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ embed
        with st.session_state.db_manager.engine.connect() as conn:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IDs ‡∏ó‡∏µ‡πà embed ‡πÅ‡∏•‡πâ‡∏ß
            try:
                embedded_result = conn.execute(text(f"SELECT id FROM {embedding_table}"))
                embedded_ids = set(row[0] for row in embedded_result.fetchall())
            except:
                embedded_ids = set()
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ embed ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ source_column ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            if embedded_ids:
                ids_placeholder = ', '.join(map(str, embedded_ids))
                query = f"""
                SELECT id, {source_column} FROM {table_name} 
                WHERE id NOT IN ({ids_placeholder}) 
                AND {source_column} IS NOT NULL 
                AND TRIM({source_column}) != ''
                LIMIT {max_records}
                """
            else:
                query = f"""
                SELECT id, {source_column} FROM {table_name} 
                WHERE {source_column} IS NOT NULL 
                AND TRIM({source_column}) != ''
                LIMIT {max_records}
                """
            
            result = conn.execute(text(query))
            data = result.fetchall()
        
        if not data:
            st.info("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î embedded ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á")
            return
        
        st.info(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• {len(data):,} records ‡∏à‡∏≤‡∏Å column '{source_column}'...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á progress tracking
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        success_count = 0
        error_count = 0
        
        # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô batch
        for i in range(0, len(data), batch_size):
            batch_data = data[i:i + batch_size]
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö batch ‡∏ô‡∏µ‡πâ
            batch_embeddings = []
            for record in batch_data:
                try:
                    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏™‡∏£‡πâ‡∏≤‡∏á embedding
                    text_content = str(record[1]) if record[1] else ""
                    
                    if not text_content.strip():
                        error_count += 1
                        continue
                    
                    response = requests.post(
                        EMBEDDING_API_URL,
                        json={
                            "model": EMBEDDING_MODEL,
                            "prompt": text_content
                        },
                        timeout=30
                    )
                    
                    if response.status_code == 200:
                        result = response.json()
                        if "embedding" in result:
                            batch_embeddings.append({
                                "id": record[0],
                                "source_text": text_content,
                                "embedding": result["embedding"]
                            })
                            success_count += 1
                        else:
                            error_count += 1
                    else:
                        error_count += 1
                        
                except Exception as e:
                    error_count += 1
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å batch ‡∏ô‡∏µ‡πâ‡∏•‡∏á database
            if batch_embeddings:
                with st.session_state.db_manager.engine.begin() as conn:
                    for item in batch_embeddings:
                        try:
                            vector_array = np.array(item["embedding"], dtype=np.float32)
                            vector_bytes = vector_array.tobytes()
                            
                            conn.execute(
                                text(f"""
                                    INSERT INTO {embedding_table} (id, source_text, embedding, metadata)
                                    VALUES (:id, :source_text, :embedding, :metadata)
                                    ON DUPLICATE KEY UPDATE
                                      source_text = VALUES(source_text),
                                      embedding = VALUES(embedding),
                                      metadata = VALUES(metadata)
                                """),
                                {
                                    "id": item["id"],
                                    "source_text": item["source_text"][:500],  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
                                    "embedding": vector_bytes,
                                    "metadata": json.dumps({
                                        "original_id": item["id"],
                                        "source_column": source_column,
                                        "text_length": len(item["source_text"])
                                    })
                                }
                            )
                        except Exception as e:
                            st.error(f"Error saving embedding: {str(e)}")
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó progress
            progress = min((i + batch_size) / len(data), 1.0)
            progress_bar.progress(progress)
            status_text.text(f"‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {min(i + batch_size, len(data))}/{len(data)} (‚úÖ {success_count}, ‚ùå {error_count})")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ
        progress_bar.empty()
        status_text.empty()
        
        st.markdown(f"""
        <div class="success-box">
            <h3>üéâ Embedding Process ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!</h3>
            <p>‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_count:,} records</p>
            <p>‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error_count:,} records</p>
            <p>üìä ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô table: {embedding_table}</p>
            <p>üìù Source column: {source_column}</p>
        </div>
        """, unsafe_allow_html=True)
        
    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings: {str(e)}")

def main():
    # Header
    st.markdown("""
    <div class="main-header">
        <h1>üöÄ NTOneEmbedding System</h1>
        <p>‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AI/ML ‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£ - ‡∏à‡∏≤‡∏Å Table ‡∏™‡∏π‡πà Vector Embeddings</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Initialize database manager
    if 'db_manager' not in st.session_state:
        st.session_state.db_manager = DatabaseManager()
    
    if not st.session_state.db_manager.engine:
        st.markdown("""
        <div class="error-box">
            <h3>‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database ‡πÑ‡∏î‡πâ</h3>
            <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ TIDB_URL ‡πÉ‡∏ô environment variables ‡∏´‡∏£‡∏∑‡∏≠ Streamlit secrets</p>
        </div>
        """, unsafe_allow_html=True)
        return
    
    # Sidebar menu
    with st.sidebar:
        st.markdown("""
        <div style="text-align: center; padding: 2rem 1rem 1rem; margin-bottom: 1rem; border-bottom: 1px solid rgba(59, 130, 246, 0.2);">
            <h1 style="background: linear-gradient(45deg, #3b82f6, #06b6d4, #0ea5e9); background-clip: text; -webkit-background-clip: text; -webkit-text-fill-color: transparent; font-size: 1.5rem; font-weight: 800; margin: 0;">üöÄ NTOneEmbedding</h1>
            <p style="color: rgba(255, 255, 255, 0.7); font-size: 0.8rem; margin: 0.5rem 0 0 0;">AI/ML Data Management System</p>
        </div>
        """, unsafe_allow_html=True)
        
        menu_option = st.radio(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π:",
            ["üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á Table ‡πÉ‡∏´‡∏°‡πà", "üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Table ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà", "üìÅ Upload CSV File", "ü§ñ Run Embedding Process"]
        )
        
        # System Status - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ API
        st.markdown("---")
        st.markdown("### üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ API
        api_status = check_api_status()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Database
        if api_status['database']['status']:
            st.markdown(f"""
            <div style="display: flex; align-items: center; padding: 0.5rem; background: linear-gradient(135deg, #065f46, #047857); border-radius: 8px; margin-bottom: 0.5rem;">
                <span style="color: #10b981; margin-right: 0.5rem;">‚óè</span>
                <div>
                    <div style="color: #d1fae5; font-weight: 600; font-size: 0.9rem;">Database</div>
                    <div style="color: #a7f3d0; font-size: 0.8rem;">{api_status['database']['message']}</div>
                </div>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div style="display: flex; align-items: center; padding: 0.5rem; background: linear-gradient(135deg, #7f1d1d, #991b1b); border-radius: 8px; margin-bottom: 0.5rem;">
                <span style="color: #ef4444; margin-right: 0.5rem;">‚óè</span>
                <div>
                    <div style="color: #fecaca; font-weight: 600; font-size: 0.9rem;">Database</div>
                    <div style="color: #fca5a5; font-size: 0.8rem;">{api_status['database']['message']}</div>
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Embedding API
        if api_status['embedding_api']['status']:
            st.markdown(f"""
            <div style="display: flex; align-items: center; padding: 0.5rem; background: linear-gradient(135deg, #065f46, #047857); border-radius: 8px; margin-bottom: 0.5rem;">
                <span style="color: #10b981; margin-right: 0.5rem;">‚óè</span>
                <div>
                    <div style="color: #d1fae5; font-weight: 600; font-size: 0.9rem;">Embedding API</div>
                    <div style="color: #a7f3d0; font-size: 0.8rem;">{api_status['embedding_api']['message']}</div>
                    <div style="color: #6ee7b7; font-size: 0.7rem;">Model: {EMBEDDING_MODEL}</div>
                </div>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div style="display: flex; align-items: center; padding: 0.5rem; background: linear-gradient(135deg, #7f1d1d, #991b1b); border-radius: 8px; margin-bottom: 0.5rem;">
                <span style="color: #ef4444; margin-right: 0.5rem;">‚óè</span>
                <div>
                    <div style="color: #fecaca; font-weight: 600; font-size: 0.9rem;">Embedding API</div>
                    <div style="color: #fca5a5; font-size: 0.8rem;">{api_status['embedding_api']['message']}</div>
                    <div style="color: #f87171; font-size: 0.7rem;">Server: {EMBEDDING_API_URL}</div>
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        st.markdown("---")
        st.markdown("### üìà ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô tables
        try:
            tables = st.session_state.db_manager.get_existing_tables()
            st.metric("üìã Tables ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", len(tables))
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô embedding tables
            embedding_tables = [t for t in tables if t.endswith('_vectors')]
            st.metric("ü§ñ Embedding Tables", len(embedding_tables))
        except:
            st.metric("üìã Tables ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "N/A")
            st.metric("ü§ñ Embedding Tables", "N/A")
    
    # Main content
    if menu_option == "üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á Table ‡πÉ‡∏´‡∏°‡πà":
        show_create_table_interface()
    elif menu_option == "üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Table ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà":
        show_select_table_interface()
    elif menu_option == "üìÅ Upload CSV File":
        show_upload_csv_interface()
    elif menu_option == "ü§ñ Run Embedding Process":
        show_embedding_interface()

if __name__ == "__main__":
    main()
