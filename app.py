import streamlit as st
import pandas as pd
import numpy as np
import json
import io
import subprocess
import sys
import base64
import requests
from datetime import datetime, date
from sqlalchemy import create_engine, text, inspect, MetaData, Table, Column, Integer, String, Text, DateTime, Float
from sqlalchemy.exc import SQLAlchemyError
import pymysql
from dotenv import load_dotenv
import os

# Configuration
st.set_page_config(
    page_title="‡∏£‡∏∞‡∏ö‡∏ö embedding sql database",
    page_icon="üóÇÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Modern CSS with Yellow/Gold Theme and Gradients
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');
    
    .main {
        font-family: 'Poppins', sans-serif;
    }
    
    .main-header {
        background: linear-gradient(135deg, #f39f86 0%, #f9d71c 25%, #deb992 50%, #f39f86 75%, #f9d71c 100%);
        padding: 2rem;
        border-radius: 20px;
        margin-bottom: 2rem;
        text-align: center;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        position: relative;
        overflow: hidden;
    }
    
    .main-header::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: linear-gradient(45deg, rgba(255,255,255,0.1) 0%, transparent 50%, rgba(255,255,255,0.1) 100%);
        animation: shimmer 3s infinite;
    }
    
    @keyframes shimmer {
        0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
        100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
    }
    
    .main-header h1 {
        color: white;
        margin: 0;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        font-weight: 700;
        position: relative;
        z-index: 2;
    }
    
    .main-header p {
        color: rgba(255,255,255,0.9);
        margin: 0.5rem 0 0 0;
        font-size: 1.1rem;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.2);
        position: relative;
        z-index: 2;
    }
    
    .success-box {
        padding: 1.5rem;
        border-radius: 15px;
        background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
        border: 1px solid #28a745;
        color: #155724;
        margin: 1rem 0;
        box-shadow: 0 5px 15px rgba(40, 167, 69, 0.2);
        position: relative;
        overflow: hidden;
    }
    
    .success-box::before {
        content: '‚úÖ';
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        font-size: 2rem;
        opacity: 0.3;
    }
    
    .error-box {
        padding: 1.5rem;
        border-radius: 15px;
        background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
        border: 1px solid #dc3545;
        color: #721c24;
        margin: 1rem 0;
        box-shadow: 0 5px 15px rgba(220, 53, 69, 0.2);
        position: relative;
        overflow: hidden;
    }
    
    .error-box::before {
        content: '‚ùå';
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        font-size: 2rem;
        opacity: 0.3;
    }
    
    .info-box {
        padding: 1.5rem;
        border-radius: 15px;
        background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
        border: 1px solid #ffc107;
        color: #856404;
        margin: 1rem 0;
        box-shadow: 0 5px 15px rgba(255, 193, 7, 0.2);
        position: relative;
        overflow: hidden;
    }
    
    .info-box::before {
        content: '‚ÑπÔ∏è';
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        font-size: 2rem;
        opacity: 0.3;
    }
    
    .metric-card {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        padding: 1.5rem;
        border-radius: 15px;
        box-shadow: 0 5px 20px rgba(0,0,0,0.1);
        border: 1px solid #e9ecef;
        text-align: center;
        transition: transform 0.3s ease;
    }
    
    .metric-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 25px rgba(0,0,0,0.15);
    }
    
    .sidebar .sidebar-content {
        background: linear-gradient(180deg, #f9d71c 0%, #deb992 100%);
    }
    
    .stButton > button {
        background: linear-gradient(135deg, #f9d71c 0%, #f39f86 100%);
        color: white;
        border: none;
        border-radius: 25px;
        padding: 0.75rem 2rem;
        font-weight: 600;
        box-shadow: 0 5px 15px rgba(243, 159, 134, 0.3);
        transition: all 0.3s ease;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(243, 159, 134, 0.4);
        background: linear-gradient(135deg, #f39f86 0%, #f9d71c 100%);
    }
    
    .stSelectbox > div > div {
        border-radius: 10px;
        border: 2px solid #f9d71c;
    }
    
    .stTextInput > div > div > input {
        border-radius: 10px;
        border: 2px solid #f9d71c;
    }
    
    .stTextInput > div > div > input:focus {
        border-color: #f39f86;
        box-shadow: 0 0 0 0.2rem rgba(249, 215, 28, 0.25);
    }
    
    .stDataFrame {
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 5px 20px rgba(0,0,0,0.1);
    }
    
    .section-header {
        background: linear-gradient(90deg, #f9d71c 0%, #f39f86 100%);
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
        font-weight: 600;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.2);
    }
    
    .progress-container {
        background: white;
        border-radius: 10px;
        padding: 1rem;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        margin: 1rem 0;
    }
    
    .stProgress > div > div {
        background: linear-gradient(90deg, #f9d71c 0%, #f39f86 100%);
        border-radius: 10px;
    }
</style>
""", unsafe_allow_html=True)

class DatabaseManager:
    def __init__(self):
        self.engine = None
        self.connect_to_database()
    
    def connect_to_database(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö TiDB Database"""
        try:
            tidb_url = os.getenv("TIDB_URL")
            if not tidb_url:
                st.error("‚ùå TIDB_URL ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô environment variables")
                return False
            
            self.engine = create_engine(tidb_url)
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            with self.engine.connect() as conn:
                conn.execute(text("SELECT 1"))
            
            return True
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database ‡πÑ‡∏î‡πâ: {str(e)}")
            return False
    
    def get_existing_tables(self):
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ tables ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"""
        try:
            inspector = inspect(self.engine)
            tables = inspector.get_table_names()
            return tables
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ tables ‡πÑ‡∏î‡πâ: {str(e)}")
            return []
    
    def get_table_columns(self, table_name):
        """‡∏î‡∏∂‡∏á columns ‡∏Ç‡∏≠‡∏á table ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
        try:
            inspector = inspect(self.engine)
            columns = inspector.get_columns(table_name)
            return columns
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á columns ‡∏Ç‡∏≠‡∏á table {table_name} ‡πÑ‡∏î‡πâ: {str(e)}")
            return []
    
    def create_new_table(self, table_name, columns_config):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á table ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏° configuration ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        try:
            metadata = MetaData()
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á columns ‡∏ï‡∏≤‡∏° config
            table_columns = []
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° ID column ‡πÄ‡∏õ‡πá‡∏ô primary key ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠
            table_columns.append(Column('id', Integer, primary_key=True, autoincrement=True))
            
            for col_config in columns_config:
                col_name = col_config['name']
                col_type = col_config['type']
                col_nullable = col_config['nullable']
                
                # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á id column ‡∏ã‡πâ‡∏≥
                if col_name.lower() == 'id':
                    continue
                
                if col_type == 'Integer':
                    column = Column(col_name, Integer, nullable=col_nullable)
                elif col_type == 'String':
                    column = Column(col_name, String(255), nullable=col_nullable)
                elif col_type == 'Text':
                    column = Column(col_name, Text, nullable=col_nullable)
                elif col_type == 'Float':
                    column = Column(col_name, Float, nullable=col_nullable)
                elif col_type == 'DateTime':
                    column = Column(col_name, DateTime, nullable=col_nullable)
                
                table_columns.append(column)
            
            table = Table(table_name, metadata, *table_columns)
            metadata.create_all(self.engine)
            
            return True
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á table {table_name} ‡πÑ‡∏î‡πâ: {str(e)}")
            return False
    
    def insert_data_from_csv(self, table_name, df):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å DataFrame ‡πÄ‡∏Ç‡πâ‡∏≤ table"""
        try:
            success_count = 0
            error_count = 0
            errors = []
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á progress bar
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            total_rows = len(df)
            
            with self.engine.begin() as conn:
                for index, row in df.iterrows():
                    try:
                        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô dict ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ columns ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà id
                        row_dict = {k: v for k, v in row.to_dict().items() if k.lower() != 'id'}
                        
                        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• NaN ‡πÅ‡∏•‡∏∞ None
                        for key, value in row_dict.items():
                            if pd.isna(value):
                                row_dict[key] = None
                        
                        # ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL insert statement (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° id ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô AUTO_INCREMENT)
                        columns = ', '.join(row_dict.keys())
                        placeholders = ', '.join([f':{key}' for key in row_dict.keys()])
                        
                        sql = f"INSERT INTO {table_name} ({columns}) VALUES ({placeholders})"
                        conn.execute(text(sql), row_dict)
                        
                        success_count += 1
                        
                    except Exception as e:
                        error_count += 1
                        errors.append(f"‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà {index + 1}: {str(e)}")
                    
                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó progress
                    progress = (index + 1) / total_rows
                    progress_bar.progress(progress)
                    status_text.text(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {index + 1}/{total_rows}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ
            progress_bar.empty()
            status_text.empty()
            
            return success_count, error_count, errors
            
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {str(e)}")
            return 0, len(df), [str(e)]

def main():
    # Header
    st.markdown("""
    <div class="main-header">
        <h1>üóÇÔ∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Table</h1>
        <p>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Tables ‡πÅ‡∏•‡∏∞ Import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV ‡πÅ‡∏ö‡∏ö‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Initialize database manager
    if 'db_manager' not in st.session_state:
        st.session_state.db_manager = DatabaseManager()
    
    if not st.session_state.db_manager.engine:
        st.markdown("""
        <div class="error-box">
            <h3>‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database ‡πÑ‡∏î‡πâ</h3>
            <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ TIDB_URL ‡πÉ‡∏ô environment variables</p>
        </div>
        """, unsafe_allow_html=True)
        return
    
    # Sidebar menu
    st.sidebar.markdown('<div class="section-header">üìã ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å</div>', unsafe_allow_html=True)
    menu_option = st.sidebar.radio(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:",
        ["üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á Table ‡πÉ‡∏´‡∏°‡πà", "üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Table ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà", "üìÅ Upload CSV File", "ü§ñ Run Embedding Process"],
        label_visibility="collapsed"
    )
    
    if menu_option == "üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á Table ‡πÉ‡∏´‡∏°‡πà":
        show_create_table_interface()
    elif menu_option == "üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Table ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà":
        show_select_table_interface()
    elif menu_option == "üìÅ Upload CSV File":
        show_upload_csv_interface()
    elif menu_option == "ü§ñ Run Embedding Process":
        show_embedding_interface()

def show_create_table_interface():
    """‡πÅ‡∏™‡∏î‡∏á interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á table ‡πÉ‡∏´‡∏°‡πà"""
    st.markdown('<div class="section-header">üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á Table ‡πÉ‡∏´‡∏°‡πà</div>', unsafe_allow_html=True)
    
    # ‡∏ä‡∏∑‡πà‡∏≠ table
    table_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠ Table:", placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠ table ‡πÉ‡∏´‡∏°‡πà")
    
    if not table_name:
        st.markdown("""
        <div class="info-box">
            <h4>üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</h4>
            <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠ table ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° ID column ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏õ‡πá‡∏ô Primary Key</p>
        </div>
        """, unsafe_allow_html=True)
        return
    
    st.markdown('<div class="section-header">üìù ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Columns</div>', unsafe_allow_html=True)
    
    # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ columns configuration
    if 'columns_config' not in st.session_state:
        st.session_state.columns_config = []
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° column ‡πÉ‡∏´‡∏°‡πà
    with st.container():
        col1, col2, col3, col4 = st.columns([3, 2, 2, 1])
        
        with col1:
            new_col_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠ Column:", key="new_col_name", placeholder="‡πÄ‡∏ä‡πà‡∏ô name, email")
        with col2:
            new_col_type = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", 
                                       ["String", "Integer", "Float", "Text", "DateTime"], 
                                       key="new_col_type")
        with col3:
            new_col_nullable = st.checkbox("‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï NULL", value=True, key="new_col_nullable")
        with col4:
            if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°", help="‡πÄ‡∏û‡∏¥‡πà‡∏° column ‡πÉ‡∏´‡∏°‡πà"):
                if new_col_name:
                    if new_col_name.lower() != 'id':  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° id column
                        st.session_state.columns_config.append({
                            'name': new_col_name,
                            'type': new_col_type,
                            'nullable': new_col_nullable
                        })
                        st.rerun()  # ‡πÉ‡∏ä‡πâ st.rerun() ‡πÅ‡∏ó‡∏ô st.experimental_rerun()
                    else:
                        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° 'id' column ‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ columns ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß
    if st.session_state.columns_config:
        st.markdown('<div class="section-header">üìã Columns ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î</div>', unsafe_allow_html=True)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö table
        cols_data = []
        cols_data.append({
            '‡∏ä‡∏∑‡πà‡∏≠ Column': 'id',
            '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•': 'Integer',
            '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï NULL': '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ',
            '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏': 'Primary Key (Auto)'
        })
        
        for col_config in st.session_state.columns_config:
            cols_data.append({
                '‡∏ä‡∏∑‡πà‡∏≠ Column': col_config['name'],
                '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•': col_config['type'],
                '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï NULL': '‡πÑ‡∏î‡πâ' if col_config['nullable'] else '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ',
                '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏': ''
            })
        
        df_cols = pd.DataFrame(cols_data)
        st.dataframe(df_cols, use_container_width=True, hide_index=True)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
        col1, col2, col3 = st.columns([1, 1, 1])
        
        with col1:
            if st.button("üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", help="‡∏•‡πâ‡∏≤‡∏á columns ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
                st.session_state.columns_config = []
                st.rerun()
        
        with col3:
            if st.button("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Table", type="primary", help="‡∏™‡∏£‡πâ‡∏≤‡∏á table ‡πÉ‡∏´‡∏°‡πà"):
                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á table..."):
                    if st.session_state.db_manager.create_new_table(table_name, st.session_state.columns_config):
                        st.markdown(f"""
                        <div class="success-box">
                            <h4>üéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á Table ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h4>
                            <p>‡∏™‡∏£‡πâ‡∏≤‡∏á table '<strong>{table_name}</strong>' ‡∏û‡∏£‡πâ‡∏≠‡∏° {len(st.session_state.columns_config) + 1} columns ‡πÅ‡∏•‡πâ‡∏ß</p>
                        </div>
                        """, unsafe_allow_html=True)
                        st.session_state.columns_config = []  # ‡∏•‡πâ‡∏≤‡∏á config
                        st.balloons()
                    else:
                        st.markdown("""
                        <div class="error-box">
                            <h4>‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Table ‡πÑ‡∏î‡πâ</h4>
                            <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠ table ‡πÅ‡∏•‡∏∞ columns ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
                        </div>
                        """, unsafe_allow_html=True)

def show_select_table_interface():
    """‡πÅ‡∏™‡∏î‡∏á interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å table ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà"""
    st.markdown('<div class="section-header">üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Table ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà</div>', unsafe_allow_html=True)
    
    # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ tables
    tables = st.session_state.db_manager.get_existing_tables()
    
    if not tables:
        st.markdown("""
        <div class="info-box">
            <h4>üí° ‡πÑ‡∏°‡πà‡∏û‡∏ö Tables</h4>
            <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ tables ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á table ‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô</p>
        </div>
        """, unsafe_allow_html=True)
        return
    
    selected_table = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Table:", tables, help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å table ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    
    if selected_table:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á table ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        columns = st.session_state.db_manager.get_table_columns(selected_table)
        
        st.markdown(f'<div class="section-header">üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Table: {selected_table}</div>', unsafe_allow_html=True)
        
        if columns:
            # ‡πÅ‡∏™‡∏î‡∏á column information
            col_data = []
            for col in columns:
                col_data.append({
                    '‡∏ä‡∏∑‡πà‡∏≠ Column': col['name'],
                    '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•': str(col['type']),
                    '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï NULL': '‡πÑ‡∏î‡πâ' if col['nullable'] else '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ'
                })
            
            df_cols = pd.DataFrame(col_data)
            st.dataframe(df_cols, use_container_width=True, hide_index=True)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 10 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å)
            try:
                with st.session_state.db_manager.engine.connect() as conn:
                    # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    count_result = conn.execute(text(f"SELECT COUNT(*) FROM {selected_table}"))
                    total_count = count_result.scalar()
                    
                    result = conn.execute(text(f"SELECT * FROM {selected_table} LIMIT 10"))
                    data = result.fetchall()
                    column_names = result.keys()
                    
                st.markdown(f'<div class="section-header">üëÄ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏£‡∏ß‡∏° {total_count:,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)</div>', unsafe_allow_html=True)
                
                if data:
                    df_preview = pd.DataFrame(data, columns=column_names)
                    st.dataframe(df_preview, use_container_width=True, hide_index=True)
                else:
                    st.markdown("""
                    <div class="info-box">
                        <h4>üì≠ Table ‡∏ß‡πà‡∏≤‡∏á</h4>
                        <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
            except Exception as e:
                st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {str(e)}")

def show_upload_csv_interface():
    """‡πÅ‡∏™‡∏î‡∏á interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö upload CSV file"""
    st.markdown('<div class="section-header">üìÅ Upload CSV File</div>', unsafe_allow_html=True)
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å table
    tables = st.session_state.db_manager.get_existing_tables()
    
    if not tables:
        st.markdown("""
        <div class="info-box">
            <h4>üí° ‡πÑ‡∏°‡πà‡∏û‡∏ö Tables</h4>
            <p>‡πÑ‡∏°‡πà‡∏û‡∏ö tables ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á table ‡∏Å‡πà‡∏≠‡∏ô</p>
        </div>
        """, unsafe_allow_html=True)
        return
    
    selected_table = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Table ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á:", tables, key="upload_table_select")
    
    if selected_table:
        # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î template
        columns = st.session_state.db_manager.get_table_columns(selected_table)
        
        if columns:
            st.markdown('<div class="section-header">üìã Template CSV</div>', unsafe_allow_html=True)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á template CSV (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° id column)
            template_data = {}
            for col in columns:
                if col['name'] != 'id':  # ‡∏Ç‡πâ‡∏≤‡∏° id column ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô auto increment
                    if col['type'].__class__.__name__ == 'VARCHAR' or 'String' in str(col['type']):
                        template_data[col['name']] = ['‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°']
                    elif 'Integer' in str(col['type']) or 'INT' in str(col['type']):
                        template_data[col['name']] = [123]
                    elif 'Float' in str(col['type']) or 'DECIMAL' in str(col['type']):
                        template_data[col['name']] = [123.45]
                    elif 'DateTime' in str(col['type']) or 'DATE' in str(col['type']):
                        template_data[col['name']] = ['2023-07-01']
                    else:
                        template_data[col['name']] = ['‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•']
            
            template_df = pd.DataFrame(template_data)
            
            # ‡πÅ‡∏™‡∏î‡∏á template
            st.dataframe(template_df, use_container_width=True, hide_index=True)
            
            # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î template
            csv_buffer = io.StringIO()
            template_df.to_csv(csv_buffer, index=False)
            csv_string = csv_buffer.getvalue()
            
            st.download_button(
                label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Template CSV",
                data=csv_string,
                file_name=f"{selected_table}_template.csv",
                mime="text/csv",
                help="‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
            )
            
            st.divider()
            
            # Upload file
            st.markdown('<div class="section-header">üì§ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV</div>', unsafe_allow_html=True)
            
            uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV:", type=['csv'], help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏à‡∏∞ import")
            
            if uploaded_file is not None:
                try:
                    # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV
                    df = pd.read_csv(uploaded_file)
                    
                    st.success(f"‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(df):,} ‡πÅ‡∏ñ‡∏ß")
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    st.markdown('<div class="section-header">üëÄ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞ Import</div>', unsafe_allow_html=True)
                    st.dataframe(df.head(10), use_container_width=True, hide_index=True)
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö columns
                    table_columns = [col['name'] for col in columns if col['name'] != 'id']
                    csv_columns = df.columns.tolist()
                    
                    missing_columns = set(table_columns) - set(csv_columns)
                    extra_columns = set(csv_columns) - set(table_columns)
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö columns
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        if missing_columns:
                            st.markdown(f"""
                            <div class="error-box">
                                <h4>‚ùå Columns ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ</h4>
                                <p>{', '.join(missing_columns)}</p>
                            </div>
                            """, unsafe_allow_html=True)
                        else:
                            st.markdown("""
                            <div class="success-box">
                                <h4>‚úÖ Columns ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô</h4>
                                <p>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV ‡∏°‡∏µ columns ‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</p>
                            </div>
                            """, unsafe_allow_html=True)
                    
                    with col2:
                        if extra_columns:
                            st.markdown(f"""
                            <div class="info-box">
                                <h4>‚ÑπÔ∏è Columns ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</h4>
                                <p>{', '.join(extra_columns)} (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡∏Å‡πÄ‡∏â‡∏¢)</p>
                            </div>
                            """, unsafe_allow_html=True)
                    
                    # ‡∏õ‡∏∏‡πà‡∏° Import
                    if not missing_columns:
                        col1, col2, col3 = st.columns([1, 2, 1])
                        with col2:
                            if st.button("üöÄ Import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", type="primary", use_container_width=True, help="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
                                # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ columns ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
                                df_filtered = df[table_columns]
                                
                                # Import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
                                    success_count, error_count, errors = st.session_state.db_manager.insert_data_from_csv(
                                        selected_table, df_filtered
                                    )
                                
                                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ
                                st.markdown('<div class="section-header">üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£ Import</div>', unsafe_allow_html=True)
                                
                                col1, col2, col3 = st.columns(3)
                                
                                with col1:
                                    st.markdown(f"""
                                    <div class="metric-card">
                                        <h2 style="color: #28a745; margin: 0;">{success_count:,}</h2>
                                        <p style="margin: 0.5rem 0 0 0; color: #666;">‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</p>
                                    </div>
                                    """, unsafe_allow_html=True)
                                with col2:
                                    st.markdown(f"""
                                    <div class="metric-card">
                                        <h2 style="color: #dc3545; margin: 0;">{error_count:,}</h2>
                                        <p style="margin: 0.5rem 0 0 0; color: #666;">‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</p>
                                    </div>
                                    """, unsafe_allow_html=True)
                                with col3:
                                    st.markdown(f"""
                                    <div class="metric-card">
                                        <h2 style="color: #6c757d; margin: 0;">{success_count + error_count:,}</h2>
                                        <p style="margin: 0.5rem 0 0 0; color: #666;">üìù ‡∏£‡∏ß‡∏°</p>
                                    </div>
                                    """, unsafe_allow_html=True)
                                
                                if success_count > 0:
                                    st.markdown(f"""
                                    <div class="success-box">
                                        <h4>üéâ Import ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h4>
                                        <p>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• <strong>{success_count:,}</strong> ‡πÅ‡∏ñ‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤ table '<strong>{selected_table}</strong>' ‡πÅ‡∏•‡πâ‡∏ß</p>
                                    </div>
                                    """, unsafe_allow_html=True)
                                    st.balloons()
                                
                                if errors:
                                    st.markdown("""
                                    <div class="error-box">
                                        <h4>‚ùå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:</h4>
                                    </div>
                                    """, unsafe_allow_html=True)
                                    
                                    with st.expander("‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", expanded=False):
                                        for error in errors[:10]:  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 10 ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏£‡∏Å
                                            st.error(error)
                                        
                                        if len(errors) > 10:
                                            st.warning(f"... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(errors) - 10} ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
                    else:
                        st.markdown("""
                        <div class="error-box">
                            <h4>‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Import ‡πÑ‡∏î‡πâ</h4>
                            <p>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV ‡∏Ç‡∏≤‡∏î columns ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô</p>
                        </div>
                        """, unsafe_allow_html=True)
                    
                except Exception as e:
                    st.markdown(f"""
                    <div class="error-box">
                        <h4>‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡πÑ‡∏î‡πâ</h4>
                        <p>{str(e)}</p>
                    </div>
                    """, unsafe_allow_html=True)

def show_embedding_interface():
    """‡πÅ‡∏™‡∏î‡∏á interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô embedding process"""
    st.markdown('<div class="section-header">ü§ñ Run Embedding Process</div>', unsafe_allow_html=True)
    
    st.markdown("""
    <div class="info-box">
        <h4>‚ÑπÔ∏è ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Embedding Process</h4>
        <p>‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏à‡∏∞:</p>
        <ul>
            <li>üìä ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å customers table</li>
            <li>ü§ñ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Embedding API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á vectors</li>
            <li>üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô customer_vectors table</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    st.markdown('<div class="section-header">üîß ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</div>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        embedding_api_url = os.getenv("EMBEDDING_API_URL", "http://209.15.123.47:11434/api/embeddings")
        st.markdown(f"""
        <div class="info-box">
            <h4>üåê Embedding API URL</h4>
            <p><code>{embedding_api_url}</code></p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        embedding_model = os.getenv("EMBEDDING_MODEL", "nomic-embed-text:latest")
        st.markdown(f"""
        <div class="info-box">
            <h4>üß† Embedding Model</h4>
            <p><code>{embedding_model}</code></p>
        </div>
        """, unsafe_allow_html=True)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö customers table
    st.markdown('<div class="section-header">üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>', unsafe_allow_html=True)
    
    try:
        with st.session_state.db_manager.engine.connect() as conn:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ customers table ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            result = conn.execute(text("SHOW TABLES LIKE 'customers'"))
            customers_exists = result.fetchone() is not None
            
            col1, col2 = st.columns(2)
            
            with col1:
                if customers_exists:
                    # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô customers
                    count_result = conn.execute(text("SELECT COUNT(*) FROM customers"))
                    customers_count = count_result.scalar()
                    
                    st.markdown(f"""
                    <div class="success-box">
                        <h4>‚úÖ Customers Table</h4>
                        <p><strong>{customers_count:,}</strong> ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    if customers_count > 0:
                        sample_result = conn.execute(text("SELECT id, name, email FROM customers LIMIT 5"))
                        sample_data = sample_result.fetchall()
                        
                        st.markdown('<div class="section-header">üëÄ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Customers</div>', unsafe_allow_html=True)
                        sample_df = pd.DataFrame(sample_data, columns=['ID', 'Name', 'Email'])
                        st.dataframe(sample_df, use_container_width=True, hide_index=True)
                else:
                    st.markdown("""
                    <div class="error-box">
                        <h4>‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Customers Table</h4>
                        <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á customers table ‡∏Å‡πà‡∏≠‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• customers</p>
                    </div>
                    """, unsafe_allow_html=True)
                    return
            
            with col2:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö customer_vectors table
                vectors_result = conn.execute(text("SHOW TABLES LIKE 'customer_vectors'"))
                vectors_exists = vectors_result.fetchone() is not None
                
                if vectors_exists:
                    vectors_count_result = conn.execute(text("SELECT COUNT(*) FROM customer_vectors"))
                    vectors_count = vectors_count_result.scalar()
                    
                    st.markdown(f"""
                    <div class="info-box">
                        <h4>üìä Customer Vectors Table</h4>
                        <p><strong>{vectors_count:,}</strong> ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    st.markdown("""
                    <div class="info-box">
                        <h4>‚ö†Ô∏è Customer Vectors Table</h4>
                        <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ table (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)</p>
                    </div>
                    """, unsafe_allow_html=True)
    
    except Exception as e:
        st.markdown(f"""
        <div class="error-box">
            <h4>‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ</h4>
            <p>{str(e)}</p>
        </div>
        """, unsafe_allow_html=True)
        return
    
    st.divider()
    
    # ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏±‡∏ô embedding
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° Embedding Process", type="primary", use_container_width=True, help="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings"):
            run_embedding_process()

def run_embedding_process():
    """‡∏£‡∏±‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ embedding ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å main.py"""
    
    progress_container = st.container()
    
    with progress_container:
        st.markdown('<div class="progress-container">', unsafe_allow_html=True)
        progress_bar = st.progress(0)
        status_text = st.empty()
        st.markdown('</div>', unsafe_allow_html=True)
    
    try:
        status_text.text("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Embedding Process...")
        progress_bar.progress(10)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        tidb_url = os.getenv("TIDB_URL")
        embedding_api_url = os.getenv("EMBEDDING_API_URL", "http://209.15.123.47:11434/api/embeddings")
        embedding_model = os.getenv("EMBEDDING_MODEL", "nomic-embed-text:latest")
        
        if not tidb_url:
            st.markdown("""
            <div class="error-box">
                <h4>‚ùå ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö</h4>
                <p>TIDB_URL ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î</p>
            </div>
            """, unsafe_allow_html=True)
            return
        
        status_text.text("üì° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...")
        progress_bar.progress(20)
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database
        engine = create_engine(tidb_url)
        
        status_text.text("üì• ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å customers table...")
        progress_bar.progress(30)
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• customers
        df = pd.read_sql("SELECT id, name, email, age, city, signup_date FROM customers", con=engine)
        
        if df.empty:
            st.markdown("""
            <div class="info-box">
                <h4>‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h4>
                <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô customers table</p>
            </div>
            """, unsafe_allow_html=True)
            return
        
        st.info(f"üìä ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(df):,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        status_text.text("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings...")
        progress_bar.progress(40)
        
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        texts = df["name"].tolist()
        ids = df["id"].tolist()
        
        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ date - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç callable issue
        df_copy = df.copy()
        df_copy["signup_date"] = df_copy["signup_date"].apply(
            lambda d: d.isoformat() if hasattr(d, 'isoformat') else str(d)
        )
        metadatas = df_copy.drop(columns=["name"]).to_dict(orient="records")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings
        embeddings = []
        total_texts = len(texts)
        
        for i, text in enumerate(texts):
            try:
                headers = {"Content-Type": "application/json"}
                payload = {
                    "model": embedding_model,
                    "prompt": str(text)
                }
                
                response = requests.post(embedding_api_url, headers=headers, json=payload, timeout=30)
                
                if response.status_code == 200:
                    result = response.json()
                    if "embedding" in result and result["embedding"]:
                        embeddings.append(result["embedding"])
                    else:
                        embeddings.append(None)
                else:
                    embeddings.append(None)
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó progress
                embed_progress = 40 + (i + 1) / total_texts * 40  # 40-80%
                progress_bar.progress(int(embed_progress))
                status_text.text(f"ü§ñ ‡∏™‡∏£‡πâ‡∏≤‡∏á embedding: {i + 1}/{total_texts}")
                
            except Exception as e:
                embeddings.append(None)
        
        status_text.text("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á customer_vectors...")
        progress_bar.progress(80)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        inserted = 0
        failed = 0
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á customer_vectors table ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        with engine.connect() as conn:
            conn.execute(text("""
                CREATE TABLE IF NOT EXISTS customer_vectors (
                    id INT PRIMARY KEY,
                    name VARCHAR(100),
                    embedding LONGBLOB,
                    metadata JSON
                )
            """))
            conn.commit()
        
        with engine.begin() as conn:
            for _id, name, vector, metadata in zip(ids, texts, embeddings, metadatas):
                if vector is None:
                    failed += 1
                    continue
                
                try:
                    vector_array = np.array(vector, dtype=np.float32)
                    vector_bytes = vector_array.tobytes()
                    
                    conn.execute(
                        text("""
                            INSERT INTO customer_vectors (id, name, embedding, metadata)
                            VALUES (:id, :name, :embedding, :metadata)
                            ON DUPLICATE KEY UPDATE
                              name = VALUES(name),
                              embedding = VALUES(embedding),
                              metadata = VALUES(metadata)
                        """),
                        {
                            "id": int(_id),
                            "name": str(name)[:100],
                            "embedding": vector_bytes,
                            "metadata": json.dumps(metadata, ensure_ascii=False)
                        }
                    )
                    inserted += 1
                    
                except Exception as e:
                    failed += 1
        
        progress_bar.progress(100)
        status_text.empty()
        progress_bar.empty()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ
        st.markdown('<div class="section-header">üéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£ Embedding</div>', unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown(f"""
            <div class="metric-card">
                <h2 style="color: #28a745; margin: 0;">{inserted:,}</h2>
                <p style="margin: 0.5rem 0 0 0; color: #666;">‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</p>
            </div>
            """, unsafe_allow_html=True)
        with col2:
            st.markdown(f"""
            <div class="metric-card">
                <h2 style="color: #dc3545; margin: 0;">{failed:,}</h2>
                <p style="margin: 0.5rem 0 0 0; color: #666;">‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</p>
            </div>
            """, unsafe_allow_html=True)
        with col3:
            st.markdown(f"""
            <div class="metric-card">
                <h2 style="color: #6c757d; margin: 0;">{inserted + failed:,}</h2>
                <p style="margin: 0.5rem 0 0 0; color: #666;">üìù ‡∏£‡∏ß‡∏°</p>
            </div>
            """, unsafe_allow_html=True)
        
        if inserted > 0:
            st.markdown(f"""
            <div class="success-box">
                <h4>üéâ Embedding Process ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h4>
                <p>‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö <strong>{inserted:,}</strong> ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß</p>
            </div>
            """, unsafe_allow_html=True)
            st.balloons()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        with engine.connect() as conn:
            verify_result = conn.execute(text("SELECT COUNT(*) FROM customer_vectors"))
            total_vectors = verify_result.scalar()
            
            sample_result = conn.execute(text("SELECT id, name, LENGTH(embedding) as embedding_size FROM customer_vectors LIMIT 3"))
            
            st.markdown('<div class="section-header">üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</div>', unsafe_allow_html=True)
            st.info(f"üìä ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô customer_vectors: {total_vectors:,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            
            sample_data = sample_result.fetchall()
            if sample_data:
                sample_df = pd.DataFrame(sample_data, columns=['ID', 'Name', 'Embedding Size (bytes)'])
                st.dataframe(sample_df, use_container_width=True, hide_index=True)
    
    except Exception as e:
        progress_bar.empty()
        status_text.empty()
        st.markdown(f"""
        <div class="error-box">
            <h4>‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h4>
            <p>{str(e)}</p>
        </div>
        """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
