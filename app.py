import streamlit as st
import pandas as pd
import numpy as np
import json
import io
import subprocess
import sys
import base64
import requests
from datetime import datetime, date
from sqlalchemy import create_engine, text, inspect, MetaData, Table, Column, Integer, String, Text, DateTime, Float
from sqlalchemy.exc import SQLAlchemyError
import pymysql
from dotenv import load_dotenv
import os

# Configuration
st.set_page_config(
    page_title="‡∏£‡∏∞‡∏ö‡∏ö Embedding SQL Database",
    page_icon="üóÇÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Modern CSS with Dark/Neon Blue Theme
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
    
    /* Global Dark Theme */
    .stApp {
        background: linear-gradient(135deg, #0a0e27 0%, #1a1d3a 100%);
        color: #e1e5f1;
    }
    
    .main {
        font-family: 'Inter', sans-serif;
        background: transparent;
    }
    
    /* Header */
    .main-header {
        background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 25%, #06b6d4 50%, #0ea5e9 75%, #2563eb 100%);
        padding: 3rem 2rem;
        border-radius: 24px;
        margin-bottom: 2rem;
        text-align: center;
        box-shadow: 0 20px 60px rgba(37, 99, 235, 0.3), 0 0 0 1px rgba(59, 130, 246, 0.2);
        position: relative;
        overflow: hidden;
        border: 1px solid rgba(59, 130, 246, 0.3);
    }
    
    .main-header::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: linear-gradient(45deg, 
            rgba(6, 182, 212, 0.1) 0%, 
            transparent 25%, 
            rgba(59, 130, 246, 0.1) 50%, 
            transparent 75%, 
            rgba(14, 165, 233, 0.1) 100%);
        animation: shimmer 4s infinite;
    }
    
    @keyframes shimmer {
        0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
        100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
    }
    
    .main-header h1 {
        color: #ffffff;
        margin: 0;
        text-shadow: 0 0 20px rgba(59, 130, 246, 0.5);
        font-weight: 700;
        font-size: 2.5rem;
        position: relative;
        z-index: 2;
        background: linear-gradient(45deg, #ffffff, #e1e5f1, #ffffff);
        background-clip: text;
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
    
    .main-header p {
        color: rgba(255, 255, 255, 0.9);
        margin: 1rem 0 0 0;
        font-size: 1.2rem;
        text-shadow: 0 0 10px rgba(59, 130, 246, 0.3);
        position: relative;
        z-index: 2;
    }
    
    /* Success Box */
    .success-box {
        background: linear-gradient(135deg, #065f46 0%, #047857 100%);
        border: 1px solid #10b981;
        color: #d1fae5;
        padding: 1.5rem;
        border-radius: 16px;
        margin: 1rem 0;
        box-shadow: 0 10px 30px rgba(16, 185, 129, 0.2), 0 0 0 1px rgba(16, 185, 129, 0.1);
        position: relative;
        overflow: hidden;
    }
    
    .success-box::before {
        content: '‚úÖ';
        position: absolute;
        right: 1.5rem;
        top: 50%;
        transform: translateY(-50%);
        font-size: 2rem;
        opacity: 0.4;
    }
    
    /* Error Box */
    .error-box {
        background: linear-gradient(135deg, #7f1d1d 0%, #991b1b 100%);
        border: 1px solid #ef4444;
        color: #fecaca;
        padding: 1.5rem;
        border-radius: 16px;
        margin: 1rem 0;
        box-shadow: 0 10px 30px rgba(239, 68, 68, 0.2), 0 0 0 1px rgba(239, 68, 68, 0.1);
        position: relative;
        overflow: hidden;
    }
    
    .error-box::before {
        content: '‚ùå';
        position: absolute;
        right: 1.5rem;
        top: 50%;
        transform: translateY(-50%);
        font-size: 2rem;
        opacity: 0.4;
    }
    
    /* Info Box */
    .info-box {
        background: linear-gradient(135deg, #1e40af 0%, #2563eb 100%);
        border: 1px solid #3b82f6;
        color: #dbeafe;
        padding: 1.5rem;
        border-radius: 16px;
        margin: 1rem 0;
        box-shadow: 0 10px 30px rgba(59, 130, 246, 0.2), 0 0 0 1px rgba(59, 130, 246, 0.1);
        position: relative;
        overflow: hidden;
    }
    
    .info-box::before {
        content: '‚ÑπÔ∏è';
        position: absolute;
        right: 1.5rem;
        top: 50%;
        transform: translateY(-50%);
        font-size: 2rem;
        opacity: 0.4;
    }
    
    /* Metric Card */
    .metric-card {
        background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
        border: 1px solid #475569;
        padding: 2rem 1.5rem;
        border-radius: 20px;
        text-align: center;
        transition: all 0.3s ease;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3), 0 0 0 1px rgba(71, 85, 105, 0.2);
        position: relative;
        overflow: hidden;
    }
    
    .metric-card:hover {
        transform: translateY(-8px) scale(1.02);
        box-shadow: 0 20px 40px rgba(59, 130, 246, 0.2), 0 0 0 1px rgba(59, 130, 246, 0.3);
        border-color: #3b82f6;
    }
    
    .metric-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(90deg, #3b82f6, #06b6d4, #0ea5e9);
        border-radius: 20px 20px 0 0;
    }
    
    /* Section Header */
    .section-header {
        background: linear-gradient(135deg, #1e40af 0%, #3b82f6 50%, #06b6d4 100%);
        color: #ffffff;
        padding: 1rem 2rem;
        border-radius: 16px;
        margin: 2rem 0 1rem 0;
        font-weight: 600;
        font-size: 1.1rem;
        text-shadow: 0 0 10px rgba(59, 130, 246, 0.5);
        box-shadow: 0 8px 25px rgba(59, 130, 246, 0.25), 0 0 0 1px rgba(59, 130, 246, 0.2);
        border: 1px solid rgba(59, 130, 246, 0.3);
    }
    
    /* Sidebar */
    .css-1d391kg, .css-1rs6os {
        background: linear-gradient(180deg, #0f172a 0%, #1e293b 100%) !important;
        border-right: 1px solid #334155;
    }
    
    .css-1d391kg .css-10trblm {
        color: #e1e5f1;
    }
    
    /* Buttons */
    .stButton > button {
        background: linear-gradient(135deg, #3b82f6 0%, #2563eb 50%, #1d4ed8 100%);
        color: white;
        border: none;
        border-radius: 12px;
        padding: 0.75rem 2rem;
        font-weight: 600;
        font-family: 'Inter', sans-serif;
        box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3), 0 0 0 1px rgba(59, 130, 246, 0.2);
        transition: all 0.3s ease;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        font-size: 0.875rem;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 12px 35px rgba(59, 130, 246, 0.4), 0 0 0 1px rgba(59, 130, 246, 0.4);
        background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 50%, #1e40af 100%);
    }
    
    .stButton > button:active {
        transform: translateY(0px);
    }
    
    /* Form Elements */
    .stSelectbox > div > div {
        background: #1e293b !important;
        border: 2px solid #334155 !important;
        border-radius: 12px !important;
        color: #e1e5f1 !important;
    }
    
    .stSelectbox > div > div:focus-within {
        border-color: #3b82f6 !important;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1) !important;
    }
    
    .stTextInput > div > div > input {
        background: #1e293b !important;
        border: 2px solid #334155 !important;
        border-radius: 12px !important;
        color: #e1e5f1 !important;
        padding: 0.75rem 1rem !important;
    }
    
    .stTextInput > div > div > input:focus {
        border-color: #3b82f6 !important;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1) !important;
    }
    
    .stTextInput > div > div > input::placeholder {
        color: #64748b !important;
    }
    
    /* Checkbox */
    .stCheckbox > label {
        color: #e1e5f1 !important;
    }
    
    /* Radio */
    .stRadio > label {
        color: #e1e5f1 !important;
    }
    
    /* DataFrame */
    .stDataFrame {
        border-radius: 16px !important;
        overflow: hidden !important;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3), 0 0 0 1px rgba(71, 85, 105, 0.3) !important;
        border: 1px solid #334155 !important;
    }
    
    /* Progress */
    .stProgress > div > div {
        background: linear-gradient(90deg, #3b82f6 0%, #06b6d4 50%, #0ea5e9 100%) !important;
        border-radius: 10px !important;
        box-shadow: 0 0 10px rgba(59, 130, 246, 0.5) !important;
    }
    
    .progress-container {
        background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
        border: 1px solid #475569;
        border-radius: 16px;
        padding: 1.5rem;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        margin: 1rem 0;
    }
    
    /* File Uploader */
    .stFileUploader > div > div {
        background: #1e293b !important;
        border: 2px dashed #334155 !important;
        border-radius: 16px !important;
        color: #e1e5f1 !important;
    }
    
    .stFileUploader > div > div:hover {
        border-color: #3b82f6 !important;
    }
    
    /* Expander */
    .streamlit-expanderHeader {
        background: #1e293b !important;
        color: #e1e5f1 !important;
        border-radius: 12px !important;
        border: 1px solid #334155 !important;
    }
    
    .streamlit-expanderContent {
        background: #0f172a !important;
        border: 1px solid #334155 !important;
        border-top: none !important;
        border-radius: 0 0 12px 12px !important;
    }
    
    /* Custom scrollbar */
    ::-webkit-scrollbar {
        width: 8px;
        height: 8px;
    }
    
    ::-webkit-scrollbar-track {
        background: #1e293b;
        border-radius: 4px;
    }
    
    ::-webkit-scrollbar-thumb {
        background: linear-gradient(135deg, #3b82f6, #06b6d4);
        border-radius: 4px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(135deg, #2563eb, #0ea5e9);
    }
    
    /* Neon glow effects */
    @keyframes neon-pulse {
        0%, 100% { 
            box-shadow: 0 0 5px rgba(59, 130, 246, 0.5),
                        0 0 10px rgba(59, 130, 246, 0.3),
                        0 0 20px rgba(59, 130, 246, 0.2);
        }
        50% { 
            box-shadow: 0 0 10px rgba(59, 130, 246, 0.8),
                        0 0 20px rgba(59, 130, 246, 0.5),
                        0 0 30px rgba(59, 130, 246, 0.3);
        }
    }
    
    .stButton > button:hover {
        animation: neon-pulse 2s infinite;
    }
</style>
""", unsafe_allow_html=True)

class DatabaseManager:
    def __init__(self):
        self.engine = None
        self.connect_to_database()
    
    def connect_to_database(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö TiDB Database"""
        try:
            tidb_url = os.getenv("TIDB_URL")
            if not tidb_url:
                st.error("‚ùå TIDB_URL ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô environment variables")
                return False
            
            self.engine = create_engine(tidb_url)
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            with self.engine.connect() as conn:
                conn.execute(text("SELECT 1"))
            
            return True
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database ‡πÑ‡∏î‡πâ: {str(e)}")
            return False
    
    def get_existing_tables(self):
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ tables ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"""
        try:
            inspector = inspect(self.engine)
            tables = inspector.get_table_names()
            return tables
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ tables ‡πÑ‡∏î‡πâ: {str(e)}")
            return []
    
    def get_table_columns(self, table_name):
        """‡∏î‡∏∂‡∏á columns ‡∏Ç‡∏≠‡∏á table ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
        try:
            inspector = inspect(self.engine)
            columns = inspector.get_columns(table_name)
            return columns
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á columns ‡∏Ç‡∏≠‡∏á table {table_name} ‡πÑ‡∏î‡πâ: {str(e)}")
            return []
    
    def check_embedded_records(self, table_name):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ record ‡πÑ‡∏´‡∏ô embedded ‡πÅ‡∏•‡πâ‡∏ß"""
        try:
            with self.engine.connect() as conn:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ customer_vectors table ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                result = conn.execute(text("SHOW TABLES LIKE 'customer_vectors'"))
                if not result.fetchone():
                    return set(), 0
                
                # ‡∏î‡∏∂‡∏á IDs ‡∏ó‡∏µ‡πà embed ‡πÅ‡∏•‡πâ‡∏ß
                embedded_result = conn.execute(text("SELECT id FROM customer_vectors"))
                embedded_ids = set(row[0] for row in embedded_result.fetchall())
                
                # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°
                total_result = conn.execute(text(f"SELECT COUNT(*) FROM {table_name}"))
                total_count = total_result.scalar()
                
                return embedded_ids, total_count
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö embedded records ‡πÑ‡∏î‡πâ: {str(e)}")
            return set(), 0
    
    def create_new_table(self, table_name, columns_config):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á table ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏° configuration ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        try:
            metadata = MetaData()
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á columns ‡∏ï‡∏≤‡∏° config
            table_columns = []
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° ID column ‡πÄ‡∏õ‡πá‡∏ô primary key ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠
            table_columns.append(Column('id', Integer, primary_key=True, autoincrement=True))
            
            for col_config in columns_config:
                col_name = col_config['name']
                col_type = col_config['type']
                col_nullable = col_config['nullable']
                
                # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á id column ‡∏ã‡πâ‡∏≥
                if col_name.lower() == 'id':
                    continue
                
                if col_type == 'Integer':
                    column = Column(col_name, Integer, nullable=col_nullable)
                elif col_type == 'String':
                    column = Column(col_name, String(255), nullable=col_nullable)
                elif col_type == 'Text':
                    column = Column(col_name, Text, nullable=col_nullable)
                elif col_type == 'Float':
                    column = Column(col_name, Float, nullable=col_nullable)
                elif col_type == 'DateTime':
                    column = Column(col_name, DateTime, nullable=col_nullable)
                
                table_columns.append(column)
            
            table = Table(table_name, metadata, *table_columns)
            metadata.create_all(self.engine)
            
            return True
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á table {table_name} ‡πÑ‡∏î‡πâ: {str(e)}")
            return False
    
    def create_embedding_table(self, base_table_name):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á table ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö embeddings"""
        try:
            embedding_table_name = f"{base_table_name}_vectors"
            
            with self.engine.connect() as conn:
                conn.execute(text(f"""
                    CREATE TABLE IF NOT EXISTS {embedding_table_name} (
                        id INT PRIMARY KEY,
                        name VARCHAR(255),
                        embedding LONGBLOB,
                        metadata JSON,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        INDEX idx_created_at (created_at)
                    )
                """))
                conn.commit()
            
            return embedding_table_name
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á embedding table ‡πÑ‡∏î‡πâ: {str(e)}")
            return None
    
    def insert_data_from_csv(self, table_name, df):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å DataFrame ‡πÄ‡∏Ç‡πâ‡∏≤ table"""
        try:
            success_count = 0
            error_count = 0
            errors = []
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á progress bar
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            total_rows = len(df)
            
            with self.engine.begin() as conn:
                for index, row in df.iterrows():
                    try:
                        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô dict ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ columns ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà id
                        row_dict = {k: v for k, v in row.to_dict().items() if k.lower() != 'id'}
                        
                        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• NaN ‡πÅ‡∏•‡∏∞ None
                        for key, value in row_dict.items():
                            if pd.isna(value):
                                row_dict[key] = None
                        
                        # ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL insert statement (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° id ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô AUTO_INCREMENT)
                        columns = ', '.join(row_dict.keys())
                        placeholders = ', '.join([f':{key}' for key in row_dict.keys()])
                        
                        sql = f"INSERT INTO {table_name} ({columns}) VALUES ({placeholders})"
                        conn.execute(text(sql), row_dict)
                        
                        success_count += 1
                        
                    except Exception as e:
                        error_count += 1
                        errors.append(f"‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà {index + 1}: {str(e)}")
                    
                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó progress
                    progress = (index + 1) / total_rows
                    progress_bar.progress(progress)
                    status_text.text(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {index + 1}/{total_rows}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ
            progress_bar.empty()
            status_text.empty()
            
            return success_count, error_count, errors
            
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {str(e)}")
            return 0, len(df), [str(e)]

def main():
    # Header
    st.markdown("""
    <div class="main-header">
        <h1>üóÇÔ∏è ‡∏£‡∏∞‡∏ö‡∏ö Embedding SQL Database</h1>
        <p>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Tables, Import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Vector Embeddings</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Initialize database manager
    if 'db_manager' not in st.session_state:
        st.session_state.db_manager = DatabaseManager()
    
    if not st.session_state.db_manager.engine:
        st.markdown("""
        <div class="error-box">
            <h3>‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database ‡πÑ‡∏î‡πâ</h3>
            <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ TIDB_URL ‡πÉ‡∏ô environment variables</p>
        </div>
        """, unsafe_allow_html=True)
        return
    
    # Sidebar menu
    st.sidebar.markdown('<div class="section-header">üìã ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å</div>', unsafe_allow_html=True)
    menu_option = st.sidebar.radio(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:",
        ["üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á Table ‡πÉ‡∏´‡∏°‡πà", "üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Table ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà", "üìÅ Upload CSV File", "ü§ñ Run Embedding Process"],
        label_visibility="collapsed"
    )
    
    if menu_option == "üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á Table ‡πÉ‡∏´‡∏°‡πà":
        show_create_table_interface()
    elif menu_option == "üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Table ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà":
        show_select_table_interface()
    elif menu_option == "üìÅ Upload CSV File":
        show_upload_csv_interface()
    elif menu_option == "ü§ñ Run Embedding Process":
        show_embedding_interface()

def show_create_table_interface():
    """‡πÅ‡∏™‡∏î‡∏á interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á table ‡πÉ‡∏´‡∏°‡πà"""
    st.markdown('<div class="section-header">üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á Table ‡πÉ‡∏´‡∏°‡πà</div>', unsafe_allow_html=True)
    
    # ‡∏ä‡∏∑‡πà‡∏≠ table
    table_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠ Table:", placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠ table ‡πÉ‡∏´‡∏°‡πà")
    
    if not table_name:
        st.markdown("""
        <div class="info-box">
            <h4>üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</h4>
            <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠ table ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° ID column ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏õ‡πá‡∏ô Primary Key</p>
        </div>
        """, unsafe_allow_html=True)
        return
    
    st.markdown('<div class="section-header">üìù ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Columns</div>', unsafe_allow_html=True)
    
    # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ columns configuration
    if 'columns_config' not in st.session_state:
        st.session_state.columns_config = []
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° column ‡πÉ‡∏´‡∏°‡πà
    with st.container():
        col1, col2, col3, col4 = st.columns([3, 2, 2, 1])
        
        with col1:
            new_col_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠ Column:", key="new_col_name", placeholder="‡πÄ‡∏ä‡πà‡∏ô name, email")
        with col2:
            new_col_type = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", 
                                       ["String", "Integer", "Float", "Text", "DateTime"], 
                                       key="new_col_type")
        with col3:
            new_col_nullable = st.checkbox("‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï NULL", value=True, key="new_col_nullable")
        with col4:
            if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°", help="‡πÄ‡∏û‡∏¥‡πà‡∏° column ‡πÉ‡∏´‡∏°‡πà"):
                if new_col_name:
                    if new_col_name.lower() != 'id':  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° id column
                        st.session_state.columns_config.append({
                            'name': new_col_name,
                            'type': new_col_type,
                            'nullable': new_col_nullable
                        })
                        st.rerun()
                    else:
                        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° 'id' column ‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ columns ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß
    if st.session_state.columns_config:
        st.markdown('<div class="section-header">üìã Columns ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î</div>', unsafe_allow_html=True)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö table
        cols_data = []
        cols_data.append({
            '‡∏ä‡∏∑‡πà‡∏≠ Column': 'id',
            '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•': 'Integer',
            '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï NULL': '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ',
            '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏': 'Primary Key (Auto)'
        })
        
        for col_config in st.session_state.columns_config:
            cols_data.append({
                '‡∏ä‡∏∑‡πà‡∏≠ Column': col_config['name'],
                '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•': col_config['type'],
                '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï NULL': '‡πÑ‡∏î‡πâ' if col_config['nullable'] else '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ',
                '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏': ''
            })
        
        df_cols = pd.DataFrame(cols_data)
        st.dataframe(df_cols, use_container_width=True, hide_index=True)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
        col1, col2, col3 = st.columns([1, 1, 1])
        
        with col1:
            if st.button("üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", help="‡∏•‡πâ‡∏≤‡∏á columns ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
                st.session_state.columns_config = []
                st.rerun()
        
        with col3:
            if st.button("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Table", type="primary", help="‡∏™‡∏£‡πâ‡∏≤‡∏á table ‡πÉ‡∏´‡∏°‡πà"):
                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á table..."):
                    if st.session_state.db_manager.create_new_table(table_name, st.session_state.columns_config):
                        st.markdown(f"""
                        <div class="success-box">
                            <h4>üéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á Table ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h4>
                            <p>‡∏™‡∏£‡πâ‡∏≤‡∏á table '<strong>{table_name}</strong>' ‡∏û‡∏£‡πâ‡∏≠‡∏° {len(st.session_state.columns_config) + 1} columns ‡πÅ‡∏•‡πâ‡∏ß</p>
                        </div>
                        """, unsafe_allow_html=True)
                        st.session_state.columns_config = []  # ‡∏•‡πâ‡∏≤‡∏á config
                        st.balloons()
                    else:
                        st.markdown("""
                        <div class="error-box">
                            <h4>‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Table ‡πÑ‡∏î‡πâ</h4>
                            <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠ table ‡πÅ‡∏•‡∏∞ columns ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
                        </div>
                        """, unsafe_allow_html=True)

def show_select_table_interface():
    """‡πÅ‡∏™‡∏î‡∏á interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å table ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà"""
    st.markdown('<div class="section-header">üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Table ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà</div>', unsafe_allow_html=True)
    
    # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ tables
    tables = st.session_state.db_manager.get_existing_tables()
    
    if not tables:
        st.markdown("""
        <div class="info-box">
            <h4>üí° ‡πÑ‡∏°‡πà‡∏û‡∏ö Tables</h4>
            <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ tables ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á table ‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô</p>
        </div>
        """, unsafe_allow_html=True)
        return
    
    selected_table = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Table:", tables, help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å table ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    
    if selected_table:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö embedding status
        embedded_ids, total_count = st.session_state.db_manager.check_embedded_records(selected_table)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á table ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        columns = st.session_state.db_manager.get_table_columns(selected_table)
        
        st.markdown(f'<div class="section-header">üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Table: {selected_table}</div>', unsafe_allow_html=True)
        
        # ‡πÅ‡∏™‡∏î‡∏á embedding status
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown(f"""
            <div class="metric-card">
                <h2 style="color: #10b981; margin: 0;">{total_count:,}</h2>
                <p style="margin: 0.5rem 0 0 0; color: #64748b;">üìù ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div class="metric-card">
                <h2 style="color: #3b82f6; margin: 0;">{len(embedded_ids):,}</h2>
                <p style="margin: 0.5rem 0 0 0; color: #64748b;">ü§ñ Embedded ‡πÅ‡∏•‡πâ‡∏ß</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            remaining = total_count - len(embedded_ids)
            st.markdown(f"""
            <div class="metric-card">
                <h2 style="color: #f59e0b; margin: 0;">{remaining:,}</h2>
                <p style="margin: 0.5rem 0 0 0; color: #64748b;">‚è≥ ‡∏£‡∏≠ Embedding</p>
            </div>
            """, unsafe_allow_html=True)
        
        if columns:
            # ‡πÅ‡∏™‡∏î‡∏á column information
            col_data = []
            for col in columns:
                col_data.append({
                    '‡∏ä‡∏∑‡πà‡∏≠ Column': col['name'],
                    '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•': str(col['type']),
                    '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï NULL': '‡πÑ‡∏î‡πâ' if col['nullable'] else '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ'
                })
            
            df_cols = pd.DataFrame(col_data)
            st.dataframe(df_cols, use_container_width=True, hide_index=True)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 10 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å)
            try:
                with st.session_state.db_manager.engine.connect() as conn:
                    result = conn.execute(text(f"SELECT * FROM {selected_table} LIMIT 10"))
                    data = result.fetchall()
                    column_names = result.keys()
                    
                st.markdown(f'<div class="section-header">üëÄ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>', unsafe_allow_html=True)
                
                if data:
                    df_preview = pd.DataFrame(data, columns=column_names)
                    st.dataframe(df_preview, use_container_width=True, hide_index=True)
                else:
                    st.markdown("""
                    <div class="info-box">
                        <h4>üì≠ Table ‡∏ß‡πà‡∏≤‡∏á</h4>
                        <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
            except Exception as e:
                st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {str(e)}")

def show_upload_csv_interface():
    """‡πÅ‡∏™‡∏î‡∏á interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö upload CSV file"""
    st.markdown('<div class="section-header">üìÅ Upload CSV File</div>', unsafe_allow_html=True)
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å table
    tables = st.session_state.db_manager.get_existing_tables()
    
    if not tables:
        st.markdown("""
        <div class="info-box">
            <h4>üí° ‡πÑ‡∏°‡πà‡∏û‡∏ö Tables</h4>
            <p>‡πÑ‡∏°‡πà‡∏û‡∏ö tables ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á table ‡∏Å‡πà‡∏≠‡∏ô</p>
        </div>
        """, unsafe_allow_html=True)
        return
    
    selected_table = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Table ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á:", tables, key="upload_table_select")
    
    if selected_table:
        # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î template
        columns = st.session_state.db_manager.get_table_columns(selected_table)
        
        if columns:
            st.markdown('<div class="section-header">üìã Template CSV</div>', unsafe_allow_html=True)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á template CSV (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° id column)
            template_data = {}
            for col in columns:
                if col['name'] != 'id':  # ‡∏Ç‡πâ‡∏≤‡∏° id column ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô auto increment
                    if col['type'].__class__.__name__ == 'VARCHAR' or 'String' in str(col['type']):
                        template_data[col['name']] = ['‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°']
                    elif 'Integer' in str(col['type']) or 'INT' in str(col['type']):
                        template_data[col['name']] = [123]
                    elif 'Float' in str(col['type']) or 'DECIMAL' in str(col['type']):
                        template_data[col['name']] = [123.45]
                    elif 'DateTime' in str(col['type']) or 'DATE' in str(col['type']):
                        template_data[col['name']] = ['2023-07-01']
                    else:
                        template_data[col['name']] = ['‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•']
            
            template_df = pd.DataFrame(template_data)
            
            # ‡πÅ‡∏™‡∏î‡∏á template
            st.dataframe(template_df, use_container_width=True, hide_index=True)
            
            # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î template
            csv_buffer = io.StringIO()
            template_df.to_csv(csv_buffer, index=False)
            csv_string = csv_buffer.getvalue()
            
            st.download_button(
                label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Template CSV",
                data=csv_string,
                file_name=f"{selected_table}_template.csv",
                mime="text/csv",
                help="‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
            )
            
            st.divider()
            
            # Upload file
            st.markdown('<div class="section-header">üì§ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV</div>', unsafe_allow_html=True)
            
            uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV:", type=['csv'], help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏à‡∏∞ import")
            
            if uploaded_file is not None:
                try:
                    # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV
                    df = pd.read_csv(uploaded_file)
                    
                    st.success(f"‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(df):,} ‡πÅ‡∏ñ‡∏ß")
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    st.markdown('<div class="section-header">üëÄ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞ Import</div>', unsafe_allow_html=True)
                    st.dataframe(df.head(10), use_container_width=True, hide_index=True)
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö columns
                    table_columns = [col['name'] for col in columns if col['name'] != 'id']
                    csv_columns = df.columns.tolist()
                    
                    missing_columns = set(table_columns) - set(csv_columns)
                    extra_columns = set(csv_columns) - set(table_columns)
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö columns
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        if missing_columns:
                            st.markdown(f"""
                            <div class="error-box">
                                <h4>‚ùå Columns ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ</h4>
                                <p>{', '.join(missing_columns)}</p>
                            </div>
                            """, unsafe_allow_html=True)
                        else:
                            st.markdown("""
                            <div class="success-box">
                                <h4>‚úÖ Columns ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô</h4>
                                <p>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV ‡∏°‡∏µ columns ‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</p>
                            </div>
                            """, unsafe_allow_html=True)
                    
                    with col2:
                        if extra_columns:
                            st.markdown(f"""
                            <div class="info-box">
                                <h4>‚ÑπÔ∏è Columns ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</h4>
                                <p>{', '.join(extra_columns)} (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡∏Å‡πÄ‡∏â‡∏¢)</p>
                            </div>
                            """, unsafe_allow_html=True)
                    
                    # ‡∏õ‡∏∏‡πà‡∏° Import
                    if not missing_columns:
                        col1, col2, col3 = st.columns([1, 2, 1])
                        with col2:
                            if st.button("üöÄ Import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", type="primary", use_container_width=True, help="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
                                # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ columns ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
                                df_filtered = df[table_columns]
                                
                                # Import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
                                    success_count, error_count, errors = st.session_state.db_manager.insert_data_from_csv(
                                        selected_table, df_filtered
                                    )
                                
                                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ
                                st.markdown('<div class="section-header">üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£ Import</div>', unsafe_allow_html=True)
                                
                                col1, col2, col3 = st.columns(3)
                                
                                with col1:
                                    st.markdown(f"""
                                    <div class="metric-card">
                                        <h2 style="color: #10b981; margin: 0;">{success_count:,}</h2>
                                        <p style="margin: 0.5rem 0 0 0; color: #64748b;">‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</p>
                                    </div>
                                    """, unsafe_allow_html=True)
                                with col2:
                                    st.markdown(f"""
                                    <div class="metric-card">
                                        <h2 style="color: #ef4444; margin: 0;">{error_count:,}</h2>
                                        <p style="margin: 0.5rem 0 0 0; color: #64748b;">‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</p>
                                    </div>
                                    """, unsafe_allow_html=True)
                                with col3:
                                    st.markdown(f"""
                                    <div class="metric-card">
                                        <h2 style="color: #64748b; margin: 0;">{success_count + error_count:,}</h2>
                                        <p style="margin: 0.5rem 0 0 0; color: #64748b;">üìù ‡∏£‡∏ß‡∏°</p>
                                    </div>
                                    """, unsafe_allow_html=True)
                                
                                if success_count > 0:
                                    st.markdown(f"""
                                    <div class="success-box">
                                        <h4>üéâ Import ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h4>
                                        <p>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• <strong>{success_count:,}</strong> ‡πÅ‡∏ñ‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤ table '<strong>{selected_table}</strong>' ‡πÅ‡∏•‡πâ‡∏ß</p>
                                    </div>
                                    """, unsafe_allow_html=True)
                                    st.balloons()
                                
                                if errors:
                                    st.markdown("""
                                    <div class="error-box">
                                        <h4>‚ùå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:</h4>
                                    </div>
                                    """, unsafe_allow_html=True)
                                    
                                    with st.expander("‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", expanded=False):
                                        for error in errors[:10]:  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 10 ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏£‡∏Å
                                            st.error(error)
                                        
                                        if len(errors) > 10:
                                            st.warning(f"... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(errors) - 10} ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
                    else:
                        st.markdown("""
                        <div class="error-box">
                            <h4>‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Import ‡πÑ‡∏î‡πâ</h4>
                            <p>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV ‡∏Ç‡∏≤‡∏î columns ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô</p>
                        </div>
                        """, unsafe_allow_html=True)
                    
                except Exception as e:
                    st.markdown(f"""
                    <div class="error-box">
                        <h4>‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡πÑ‡∏î‡πâ</h4>
                        <p>{str(e)}</p>
                    </div>
                    """, unsafe_allow_html=True)

def show_embedding_interface():
    """‡πÅ‡∏™‡∏î‡∏á interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô embedding process"""
    st.markdown('<div class="section-header">ü§ñ Run Embedding Process</div>', unsafe_allow_html=True)
    
    st.markdown("""
    <div class="info-box">
        <h4>‚ÑπÔ∏è ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Embedding Process</h4>
        <p>‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏à‡∏∞:</p>
        <ul>
            <li>üìä ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å table ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</li>
            <li>ü§ñ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Embedding API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á vectors</li>
            <li>üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô embedding table</li>
            <li>üîÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà embed ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏ã‡πâ‡∏≥</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å table ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö embedding
    tables = st.session_state.db_manager.get_existing_tables()
    
    if not tables:
        st.markdown("""
        <div class="error-box">
            <h4>‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Tables</h4>
            <p>‡πÑ‡∏°‡πà‡∏û‡∏ö tables ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á table ‡πÅ‡∏•‡∏∞ import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô</p>
        </div>
        """, unsafe_allow_html=True)
        return
    
    selected_table = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Table ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Embedding:", tables, key="embedding_table_select")
    
    if selected_table:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        try:
            with st.session_state.db_manager.engine.connect() as conn:
                count_result = conn.execute(text(f"SELECT COUNT(*) FROM {selected_table}"))
                total_count = count_result.scalar()
                
                if total_count == 0:
                    st.markdown("""
                    <div class="error-box">
                        <h4>‚ùå Table ‡∏ß‡πà‡∏≤‡∏á</h4>
                        <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô table ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô</p>
                    </div>
                    """, unsafe_allow_html=True)
                    return
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ name column ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                columns = st.session_state.db_manager.get_table_columns(selected_table)
                column_names = [col['name'] for col in columns]
                
                if 'name' not in column_names:
                    st.markdown(f"""
                    <div class="error-box">
                        <h4>‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö 'name' Column</h4>
                        <p>Table ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ column ‡∏ä‡∏∑‡πà‡∏≠ 'name' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á embedding</p>
                        <p>Columns ‡∏ó‡∏µ‡πà‡∏°‡∏µ: {', '.join(column_names)}</p>
                    </div>
                    """, unsafe_allow_html=True)
                    return
        
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {str(e)}")
            return
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö embedding status
        embedded_ids, _ = st.session_state.db_manager.check_embedded_records(selected_table)
        remaining_count = total_count - len(embedded_ids)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        st.markdown('<div class="section-header">üîß ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</div>', unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            embedding_api_url = os.getenv("EMBEDDING_API_URL", "http://209.15.123.47:11434/api/embeddings")
            st.markdown(f"""
            <div class="info-box">
                <h4>üåê Embedding API URL</h4>
                <p><code>{embedding_api_url}</code></p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            embedding_model = os.getenv("EMBEDDING_MODEL", "nomic-embed-text:latest")
            st.markdown(f"""
            <div class="info-box">
                <h4>üß† Embedding Model</h4>
                <p><code>{embedding_model}</code></p>
            </div>
            """, unsafe_allow_html=True)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        st.markdown('<div class="section-header">üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>', unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown(f"""
            <div class="metric-card">
                <h2 style="color: #10b981; margin: 0;">{total_count:,}</h2>
                <p style="margin: 0.5rem 0 0 0; color: #64748b;">üìù ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div class="metric-card">
                <h2 style="color: #3b82f6; margin: 0;">{len(embedded_ids):,}</h2>
                <p style="margin: 0.5rem 0 0 0; color: #64748b;">‚úÖ Embedded ‡πÅ‡∏•‡πâ‡∏ß</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            color = "#f59e0b" if remaining_count > 0 else "#10b981"
            st.markdown(f"""
            <div class="metric-card">
                <h2 style="color: {color}; margin: 0;">{remaining_count:,}</h2>
                <p style="margin: 0.5rem 0 0 0; color: #64748b;">‚è≥ ‡∏£‡∏≠ Processing</p>
            </div>
            """, unsafe_allow_html=True)
        
        if remaining_count == 0:
            st.markdown("""
            <div class="success-box">
                <h4>üéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!</h4>
                <p>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å embed ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà</p>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div class="info-box">
                <h4>üîÑ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Embedding</h4>
                <p>‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• <strong>{remaining_count:,}</strong> ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•</p>
            </div>
            """, unsafe_allow_html=True)
        
        st.divider()
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏±‡∏ô embedding
        col1, col2, col3 = st.columns([1, 2, 1])
        
        with col2:
            button_disabled = remaining_count == 0
            button_text = "‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß" if button_disabled else "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° Embedding Process"
            
            if st.button(button_text, type="primary", use_container_width=True, 
                        disabled=button_disabled, help="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings"):
                run_embedding_process(selected_table, embedded_ids)

def run_embedding_process(table_name, existing_embedded_ids):
    """‡∏£‡∏±‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ embedding ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà embed ‡πÅ‡∏•‡πâ‡∏ß"""
    
    progress_container = st.container()
    
    with progress_container:
        st.markdown('<div class="progress-container">', unsafe_allow_html=True)
        progress_bar = st.progress(0)
        status_text = st.empty()
        st.markdown('</div>', unsafe_allow_html=True)
    
    try:
        status_text.text("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Embedding Process...")
        progress_bar.progress(10)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        tidb_url = os.getenv("TIDB_URL")
        embedding_api_url = os.getenv("EMBEDDING_API_URL", "http://209.15.123.47:11434/api/embeddings")
        embedding_model = os.getenv("EMBEDDING_MODEL", "nomic-embed-text:latest")
        
        if not tidb_url:
            st.markdown("""
            <div class="error-box">
                <h4>‚ùå ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö</h4>
                <p>TIDB_URL ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î</p>
            </div>
            """, unsafe_allow_html=True)
            return
        
        status_text.text("üì° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...")
        progress_bar.progress(20)
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database
        engine = st.session_state.db_manager.engine
        
        status_text.text(f"üì• ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å {table_name} table...")
        progress_bar.progress(30)
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ embed
        columns = st.session_state.db_manager.get_table_columns(table_name)
        column_names = [col['name'] for col in columns]
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á SELECT statement ‡∏ï‡∏≤‡∏° columns ‡∏ó‡∏µ‡πà‡∏°‡∏µ
        base_columns = ['id', 'name']
        optional_columns = ['email', 'age', 'city', 'signup_date']
        available_columns = [col for col in base_columns + optional_columns if col in column_names]
        
        select_sql = f"SELECT {', '.join(available_columns)} FROM {table_name}"
        
        if existing_embedded_ids:
            ids_placeholder = ', '.join(map(str, existing_embedded_ids))
            select_sql += f" WHERE id NOT IN ({ids_placeholder})"
        
        df = pd.read_sql(select_sql, con=engine)
        
        if df.empty:
            st.markdown("""
            <div class="info-box">
                <h4>‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà</h4>
                <p>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å embed ‡πÅ‡∏•‡πâ‡∏ß</p>
            </div>
            """, unsafe_allow_html=True)
            return
        
        st.info(f"üìä ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà {len(df):,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        status_text.text("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings...")
        progress_bar.progress(40)
        
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        texts = df["name"].tolist()
        ids = df["id"].tolist()
        
        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ metadata
        df_copy = df.copy()
        if 'signup_date' in df_copy.columns:
            df_copy["signup_date"] = df_copy["signup_date"].apply(
                lambda d: d.isoformat() if hasattr(d, 'isoformat') else str(d)
            )
        metadatas = df_copy.drop(columns=["name"]).to_dict(orient="records")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings
        embeddings = []
        total_texts = len(texts)
        
        for i, text in enumerate(texts):
            try:
                headers = {"Content-Type": "application/json"}
                payload = {
                    "model": embedding_model,
                    "prompt": str(text)
                }
                
                response = requests.post(embedding_api_url, headers=headers, json=payload, timeout=30)
                
                if response.status_code == 200:
                    result = response.json()
                    if "embedding" in result and result["embedding"]:
                        embeddings.append(result["embedding"])
                    else:
                        embeddings.append(None)
                else:
                    embeddings.append(None)
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó progress
                embed_progress = 40 + (i + 1) / total_texts * 40  # 40-80%
                progress_bar.progress(int(embed_progress))
                status_text.text(f"ü§ñ ‡∏™‡∏£‡πâ‡∏≤‡∏á embedding: {i + 1}/{total_texts}")
                
            except Exception as e:
                embeddings.append(None)
        
        status_text.text(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á {table_name}_vectors...")
        progress_bar.progress(80)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á embedding table ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        embedding_table_name = st.session_state.db_manager.create_embedding_table(table_name)
        if not embedding_table_name:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á embedding table ‡πÑ‡∏î‡πâ")
            return
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        inserted = 0
        failed = 0
        
        with engine.begin() as conn:
            for _id, name, vector, metadata in zip(ids, texts, embeddings, metadatas):
                if vector is None:
                    failed += 1
                    continue
                
                try:
                    vector_array = np.array(vector, dtype=np.float32)
                    vector_bytes = vector_array.tobytes()
                    
                    conn.execute(
                        text(f"""
                            INSERT INTO {embedding_table_name} (id, name, embedding, metadata)
                            VALUES (:id, :name, :embedding, :metadata)
                            ON DUPLICATE KEY UPDATE
                              name = VALUES(name),
                              embedding = VALUES(embedding),
                              metadata = VALUES(metadata)
                        """),
                        {
                            "id": int(_id),
                            "name": str(name)[:255],
                            "embedding": vector_bytes,
                            "metadata": json.dumps(metadata, ensure_ascii=False)
                        }
                    )
                    inserted += 1
                    
                except Exception as e:
                    failed += 1
        
        progress_bar.progress(100)
        status_text.empty()
        progress_bar.empty()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ
        st.markdown('<div class="section-header">üéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£ Embedding</div>', unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown(f"""
            <div class="metric-card">
                <h2 style="color: #10b981; margin: 0;">{inserted:,}</h2>
                <p style="margin: 0.5rem 0 0 0; color: #64748b;">‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</p>
            </div>
            """, unsafe_allow_html=True)
        with col2:
            st.markdown(f"""
            <div class="metric-card">
                <h2 style="color: #ef4444; margin: 0;">{failed:,}</h2>
                <p style="margin: 0.5rem 0 0 0; color: #64748b;">‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</p>
            </div>
            """, unsafe_allow_html=True)
        with col3:
            st.markdown(f"""
            <div class="metric-card">
                <h2 style="color: #64748b; margin: 0;">{inserted + failed:,}</h2>
                <p style="margin: 0.5rem 0 0 0; color: #64748b;">üìù ‡∏£‡∏ß‡∏°</p>
            </div>
            """, unsafe_allow_html=True)
        
        if inserted > 0:
            st.markdown(f"""
            <div class="success-box">
                <h4>üéâ Embedding Process ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h4>
                <p>‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö <strong>{inserted:,}</strong> ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß</p>
            </div>
            """, unsafe_allow_html=True)
            st.balloons()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        with engine.connect() as conn:
            verify_result = conn.execute(text(f"SELECT COUNT(*) FROM {embedding_table_name}"))
            total_vectors = verify_result.scalar()
            
            sample_result = conn.execute(text(f"SELECT id, name, LENGTH(embedding) as embedding_size FROM {embedding_table_name} LIMIT 3"))
            
            st.markdown('<div class="section-header">üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</div>', unsafe_allow_html=True)
            st.info(f"üìä ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô {embedding_table_name}: {total_vectors:,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            
            sample_data = sample_result.fetchall()
            if sample_data:
                sample_df = pd.DataFrame(sample_data, columns=['ID', 'Name', 'Embedding Size (bytes)'])
                st.dataframe(sample_df, use_container_width=True, hide_index=True)
    
    except Exception as e:
        progress_bar.empty()
        status_text.empty()
        st.markdown(f"""
        <div class="error-box">
            <h4>‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}</h4>
            <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
        </div>
        """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
