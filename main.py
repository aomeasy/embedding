import streamlit as st
import pandas as pd
import numpy as np
import json
import io
import subprocess
import sys
import base64
import requests
from datetime import datetime, date
from sqlalchemy import create_engine, text, inspect, MetaData, Table, Column, Integer, String, Text, DateTime, Float
from sqlalchemy.exc import SQLAlchemyError
import pymysql
from dotenv import load_dotenv
import os

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å environment variables (GitHub Secrets)
# ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ .env file ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÉ‡∏ä‡πâ GitHub Secrets
# load_dotenv()  # Comment ‡∏≠‡∏≠‡∏Å‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÉ‡∏ä‡πâ GitHub Secrets

# Configuration
st.set_page_config(
    page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Table",
    page_icon="üóÇÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        text-align: center;
    }
    .success-box {
        padding: 1rem;
        border-radius: 10px;
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
        margin: 1rem 0;
    }
    .error-box {
        padding: 1rem;
        border-radius: 10px;
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
        margin: 1rem 0;
    }
    .info-box {
        padding: 1rem;
        border-radius: 10px;
        background-color: #d1ecf1;
        border: 1px solid #bee5eb;
        color: #0c5460;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

class DatabaseManager:
    def __init__(self):
        self.engine = None
        self.connect_to_database()
    
    def connect_to_database(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö TiDB Database"""
        try:
            tidb_url = os.getenv("TIDB_URL")
            if not tidb_url:
                st.error("‚ùå TIDB_URL ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô environment variables")
                return False
            
            self.engine = create_engine(tidb_url)
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            with self.engine.connect() as conn:
                conn.execute(text("SELECT 1"))
            
            return True
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database ‡πÑ‡∏î‡πâ: {str(e)}")
            return False
    
    def get_existing_tables(self):
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ tables ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"""
        try:
            inspector = inspect(self.engine)
            tables = inspector.get_table_names()
            return tables
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ tables ‡πÑ‡∏î‡πâ: {str(e)}")
            return []
    
    def get_table_columns(self, table_name):
        """‡∏î‡∏∂‡∏á columns ‡∏Ç‡∏≠‡∏á table ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
        try:
            inspector = inspect(self.engine)
            columns = inspector.get_columns(table_name)
            return columns
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á columns ‡∏Ç‡∏≠‡∏á table {table_name} ‡πÑ‡∏î‡πâ: {str(e)}")
            return []
    
    def create_new_table(self, table_name, columns_config):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á table ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏° configuration ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        try:
            metadata = MetaData()
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á columns ‡∏ï‡∏≤‡∏° config
            table_columns = []
            for col_config in columns_config:
                col_name = col_config['name']
                col_type = col_config['type']
                col_nullable = col_config['nullable']
                
                if col_type == 'Integer':
                    column = Column(col_name, Integer, nullable=col_nullable)
                elif col_type == 'String':
                    column = Column(col_name, String(255), nullable=col_nullable)
                elif col_type == 'Text':
                    column = Column(col_name, Text, nullable=col_nullable)
                elif col_type == 'Float':
                    column = Column(col_name, Float, nullable=col_nullable)
                elif col_type == 'DateTime':
                    column = Column(col_name, DateTime, nullable=col_nullable)
                
                table_columns.append(column)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° ID column ‡πÄ‡∏õ‡πá‡∏ô primary key
            if not any(col.name == 'id' for col in table_columns):
                table_columns.insert(0, Column('id', Integer, primary_key=True, autoincrement=True))
            
            table = Table(table_name, metadata, *table_columns)
            metadata.create_all(self.engine)
            
            return True
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á table {table_name} ‡πÑ‡∏î‡πâ: {str(e)}")
            return False
    
    def insert_data_from_csv(self, table_name, df):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å DataFrame ‡πÄ‡∏Ç‡πâ‡∏≤ table"""
        try:
            success_count = 0
            error_count = 0
            errors = []
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á progress bar
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            total_rows = len(df)
            
            with self.engine.begin() as conn:
                for index, row in df.iterrows():
                    try:
                        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô dict
                        row_dict = row.to_dict()
                        
                        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• NaN ‡πÅ‡∏•‡∏∞ None
                        for key, value in row_dict.items():
                            if pd.isna(value):
                                row_dict[key] = None
                        
                        # ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL insert statement
                        columns = ', '.join(row_dict.keys())
                        placeholders = ', '.join([f':{key}' for key in row_dict.keys()])
                        
                        sql = f"INSERT INTO {table_name} ({columns}) VALUES ({placeholders})"
                        conn.execute(text(sql), row_dict)
                        
                        success_count += 1
                        
                    except Exception as e:
                        error_count += 1
                        errors.append(f"‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà {index + 1}: {str(e)}")
                    
                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó progress
                    progress = (index + 1) / total_rows
                    progress_bar.progress(progress)
                    status_text.text(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {index + 1}/{total_rows}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ
            progress_bar.empty()
            status_text.empty()
            
            return success_count, error_count, errors
            
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {str(e)}")
            return 0, len(df), [str(e)]

def main():
    # Header
    st.markdown("""
    <div class="main-header">
        <h1 style="color: white; margin: 0;">üóÇÔ∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Table</h1>
        <p style="color: white; margin: 0;">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Tables ‡πÅ‡∏•‡∏∞ Import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Initialize database manager
    if 'db_manager' not in st.session_state:
        st.session_state.db_manager = DatabaseManager()
    
    if not st.session_state.db_manager.engine:
        st.markdown("""
        <div class="error-box">
            <h3>‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database ‡πÑ‡∏î‡πâ</h3>
            <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ TIDB_URL ‡πÉ‡∏ô environment variables</p>
        </div>
        """, unsafe_allow_html=True)
        return
    
    # Sidebar menu
    st.sidebar.title("üìã ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")
    menu_option = st.sidebar.radio(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:",
        ["üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á Table ‡πÉ‡∏´‡∏°‡πà", "üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Table ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà", "üìÅ Upload CSV File", "ü§ñ Run Embedding Process"]
    )
    
    if menu_option == "üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á Table ‡πÉ‡∏´‡∏°‡πà":
        show_create_table_interface()
    elif menu_option == "üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Table ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà":
        show_select_table_interface()
    elif menu_option == "üìÅ Upload CSV File":
        show_upload_csv_interface()
    elif menu_option == "ü§ñ Run Embedding Process":
        show_embedding_interface()

def show_create_table_interface():
    """‡πÅ‡∏™‡∏î‡∏á interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á table ‡πÉ‡∏´‡∏°‡πà"""
    st.header("üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á Table ‡πÉ‡∏´‡∏°‡πà")
    
    # ‡∏ä‡∏∑‡πà‡∏≠ table
    table_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠ Table:", placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠ table ‡πÉ‡∏´‡∏°‡πà")
    
    if not table_name:
        st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠ table ‡∏Å‡πà‡∏≠‡∏ô")
        return
    
    st.subheader("üìù ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Columns")
    
    # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ columns configuration
    if 'columns_config' not in st.session_state:
        st.session_state.columns_config = []
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° column ‡πÉ‡∏´‡∏°‡πà
    col1, col2, col3, col4 = st.columns([3, 2, 2, 1])
    
    with col1:
        new_col_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠ Column:", key="new_col_name")
    with col2:
        new_col_type = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", 
                                   ["String", "Integer", "Float", "Text", "DateTime"], 
                                   key="new_col_type")
    with col3:
        new_col_nullable = st.checkbox("‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï NULL", value=True, key="new_col_nullable")
    with col4:
        if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°"):
            if new_col_name:
                st.session_state.columns_config.append({
                    'name': new_col_name,
                    'type': new_col_type,
                    'nullable': new_col_nullable
                })
                st.experimental_rerun()
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ columns ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß
    if st.session_state.columns_config:
        st.subheader("üìã Columns ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î:")
        
        for i, col_config in enumerate(st.session_state.columns_config):
            col1, col2, col3, col4 = st.columns([3, 2, 2, 1])
            
            with col1:
                st.text(col_config['name'])
            with col2:
                st.text(col_config['type'])
            with col3:
                st.text("‡πÑ‡∏î‡πâ" if col_config['nullable'] else "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
            with col4:
                if st.button("üóëÔ∏è", key=f"delete_{i}"):
                    st.session_state.columns_config.pop(i)
                    st.experimental_rerun()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á table
        if st.button("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Table", type="primary"):
            if st.session_state.db_manager.create_new_table(table_name, st.session_state.columns_config):
                st.success(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á table '{table_name}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
                st.session_state.columns_config = []  # ‡∏•‡πâ‡∏≤‡∏á config
            else:
                st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á table ‡πÑ‡∏î‡πâ")

def show_select_table_interface():
    """‡πÅ‡∏™‡∏î‡∏á interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å table ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà"""
    st.header("üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Table ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà")
    
    # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ tables
    tables = st.session_state.db_manager.get_existing_tables()
    
    if not tables:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö tables ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
        return
    
    selected_table = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Table:", tables)
    
    if selected_table:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á table ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        columns = st.session_state.db_manager.get_table_columns(selected_table)
        
        st.subheader(f"üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Table: {selected_table}")
        
        if columns:
            # ‡πÅ‡∏™‡∏î‡∏á column information
            col_data = []
            for col in columns:
                col_data.append({
                    '‡∏ä‡∏∑‡πà‡∏≠ Column': col['name'],
                    '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•': str(col['type']),
                    '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï NULL': '‡πÑ‡∏î‡πâ' if col['nullable'] else '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ'
                })
            
            df_cols = pd.DataFrame(col_data)
            st.dataframe(df_cols, use_container_width=True)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 10 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å)
            try:
                with st.session_state.db_manager.engine.connect() as conn:
                    result = conn.execute(text(f"SELECT * FROM {selected_table} LIMIT 10"))
                    data = result.fetchall()
                    column_names = result.keys()
                    
                if data:
                    df_preview = pd.DataFrame(data, columns=column_names)
                    st.subheader("üëÄ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (10 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å)")
                    st.dataframe(df_preview, use_container_width=True)
                else:
                    st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ô‡∏µ‡πâ")
                    
            except Exception as e:
                st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {str(e)}")

def show_upload_csv_interface():
    """‡πÅ‡∏™‡∏î‡∏á interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö upload CSV file"""
    st.header("üìÅ Upload CSV File")
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å table
    tables = st.session_state.db_manager.get_existing_tables()
    
    if not tables:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö tables ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á table ‡∏Å‡πà‡∏≠‡∏ô")
        return
    
    selected_table = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Table ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á:", tables, key="upload_table_select")
    
    if selected_table:
        # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î template
        columns = st.session_state.db_manager.get_table_columns(selected_table)
        
        if columns:
            st.subheader("üìã Template CSV")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á template CSV
            template_data = {}
            for col in columns:
                if col['name'] != 'id':  # ‡∏Ç‡πâ‡∏≤‡∏° id column ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô auto increment
                    template_data[col['name']] = ['‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•']
            
            template_df = pd.DataFrame(template_data)
            
            # ‡πÅ‡∏™‡∏î‡∏á template
            st.dataframe(template_df, use_container_width=True)
            
            # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î template
            csv_buffer = io.StringIO()
            template_df.to_csv(csv_buffer, index=False)
            csv_string = csv_buffer.getvalue()
            
            st.download_button(
                label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Template CSV",
                data=csv_string,
                file_name=f"{selected_table}_template.csv",
                mime="text/csv"
            )
            
            st.divider()
            
            # Upload file
            st.subheader("üì§ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV")
            
            uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV:", type=['csv'])
            
            if uploaded_file is not None:
                try:
                    # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV
                    df = pd.read_csv(uploaded_file)
                    
                    st.success(f"‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(df)} ‡πÅ‡∏ñ‡∏ß")
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    st.subheader("üëÄ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞ Import")
                    st.dataframe(df.head(10), use_container_width=True)
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö columns
                    table_columns = [col['name'] for col in columns if col['name'] != 'id']
                    csv_columns = df.columns.tolist()
                    
                    missing_columns = set(table_columns) - set(csv_columns)
                    extra_columns = set(csv_columns) - set(table_columns)
                    
                    if missing_columns:
                        st.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô CSV ‡∏Ç‡∏≤‡∏î columns: {list(missing_columns)}")
                    if extra_columns:
                        st.warning(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô CSV ‡∏°‡∏µ columns ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: {list(extra_columns)} (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡∏Å‡πÄ‡∏â‡∏¢)")
                    
                    # ‡∏õ‡∏∏‡πà‡∏° Import
                    if st.button("üöÄ Import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", type="primary"):
                        if not missing_columns:
                            # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ columns ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
                            df_filtered = df[table_columns]
                            
                            # Import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                            success_count, error_count, errors = st.session_state.db_manager.insert_data_from_csv(
                                selected_table, df_filtered
                            )
                            
                            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ
                            st.markdown("### üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£ Import")
                            
                            col1, col2, col3 = st.columns(3)
                            
                            with col1:
                                st.metric("‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", success_count)
                            with col2:
                                st.metric("‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error_count)
                            with col3:
                                st.metric("üìù ‡∏£‡∏ß‡∏°", success_count + error_count)
                            
                            if success_count > 0:
                                st.markdown(f"""
                                <div class="success-box">
                                    <h4>‚úÖ Import ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h4>
                                    <p>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {success_count} ‡πÅ‡∏ñ‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤ table '{selected_table}' ‡πÅ‡∏•‡πâ‡∏ß</p>
                                </div>
                                """, unsafe_allow_html=True)
                            
                            if errors:
                                st.markdown("""
                                <div class="error-box">
                                    <h4>‚ùå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:</h4>
                                </div>
                                """, unsafe_allow_html=True)
                                
                                for error in errors[:10]:  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 10 ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏£‡∏Å
                                    st.error(error)
                                
                                if len(errors) > 10:
                                    st.warning(f"... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(errors) - 10} ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
                        else:
                            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Import ‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å columns ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö")
                    
                except Exception as e:
                    st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡πÑ‡∏î‡πâ: {str(e)}")

def show_embedding_interface():
    """‡πÅ‡∏™‡∏î‡∏á interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô embedding process"""
    st.header("ü§ñ Run Embedding Process")
    
    st.markdown("""
    <div class="info-box">
        <h4>‚ÑπÔ∏è ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Embedding Process</h4>
        <p>‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏à‡∏∞:</p>
        <ul>
            <li>‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å customers table</li>
            <li>‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Embedding API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á vectors</li>
            <li>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô customer_vectors table</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    st.subheader("üîß ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
    
    col1, col2 = st.columns(2)
    
    with col1:
        embedding_api_url = os.getenv("EMBEDDING_API_URL", "http://209.15.123.47:11434/api/embeddings")
        st.info(f"**Embedding API URL:**\n{embedding_api_url}")
    
    with col2:
        embedding_model = os.getenv("EMBEDDING_MODEL", "nomic-embed-text:latest")
        st.info(f"**Embedding Model:**\n{embedding_model}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö customers table
    st.subheader("üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    
    try:
        with st.session_state.db_manager.engine.connect() as conn:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ customers table ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            result = conn.execute(text("SHOW TABLES LIKE 'customers'"))
            customers_exists = result.fetchone() is not None
            
            if customers_exists:
                # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô customers
                count_result = conn.execute(text("SELECT COUNT(*) FROM customers"))
                customers_count = count_result.scalar()
                
                st.success(f"‚úÖ ‡∏û‡∏ö customers table: {customers_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                if customers_count > 0:
                    sample_result = conn.execute(text("SELECT id, name, email FROM customers LIMIT 5"))
                    sample_data = sample_result.fetchall()
                    
                    st.subheader("üëÄ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• customers")
                    sample_df = pd.DataFrame(sample_data, columns=['ID', 'Name', 'Email'])
                    st.dataframe(sample_df, use_container_width=True)
            else:
                st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö customers table")
                st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á customers table ‡∏Å‡πà‡∏≠‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• customers")
                return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö customer_vectors table
            vectors_result = conn.execute(text("SHOW TABLES LIKE 'customer_vectors'"))
            vectors_exists = vectors_result.fetchone() is not None
            
            if vectors_exists:
                vectors_count_result = conn.execute(text("SELECT COUNT(*) FROM customer_vectors"))
                vectors_count = vectors_count_result.scalar()
                st.info(f"üìä customer_vectors table ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {vectors_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            else:
                st.warning("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ customer_vectors table (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)")
    
    except Exception as e:
        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {str(e)}")
        return
    
    st.divider()
    
    # ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏±‡∏ô embedding
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° Embedding Process", type="primary", use_container_width=True):
            run_embedding_process()

def run_embedding_process():
    """‡∏£‡∏±‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ embedding ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å main.py"""
    
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    try:
        status_text.text("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Embedding Process...")
        progress_bar.progress(10)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        tidb_url = os.getenv("TIDB_URL")
        embedding_api_url = os.getenv("EMBEDDING_API_URL", "http://209.15.123.47:11434/api/embeddings")
        embedding_model = os.getenv("EMBEDDING_MODEL", "nomic-embed-text:latest")
        
        if not tidb_url:
            st.error("‚ùå TIDB_URL ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î")
            return
        
        status_text.text("üì° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...")
        progress_bar.progress(20)
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database
        engine = create_engine(tidb_url)
        
        status_text.text("üì• ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å customers table...")
        progress_bar.progress(30)
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• customers
        df = pd.read_sql("SELECT id, name, email, age, city, signup_date FROM customers", con=engine)
        
        if df.empty:
            st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô customers table")
            return
        
        st.info(f"üìä ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        status_text.text("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings...")
        progress_bar.progress(40)
        
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        texts = df["name"].tolist()
        ids = df["id"].tolist()
        
        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ date
        df_copy = df.copy()
        df_copy["signup_date"] = df_copy["signup_date"].apply(
            lambda d: d.isoformat() if isinstance(d, (date, pd.Timestamp)) else str(d)
        )
        metadatas = df_copy.drop(columns=["name"]).to_dict(orient="records")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings
        embeddings = []
        total_texts = len(texts)
        
        for i, text in enumerate(texts):
            try:
                headers = {"Content-Type": "application/json"}
                payload = {
                    "model": embedding_model,
                    "prompt": str(text)
                }
                
                response = requests.post(embedding_api_url, headers=headers, json=payload, timeout=30)
                
                if response.status_code == 200:
                    result = response.json()
                    if "embedding" in result and result["embedding"]:
                        embeddings.append(result["embedding"])
                    else:
                        embeddings.append(None)
                else:
                    embeddings.append(None)
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó progress
                embed_progress = 40 + (i + 1) / total_texts * 40  # 40-80%
                progress_bar.progress(int(embed_progress))
                status_text.text(f"ü§ñ ‡∏™‡∏£‡πâ‡∏≤‡∏á embedding: {i + 1}/{total_texts}")
                
            except Exception as e:
                embeddings.append(None)
        
        status_text.text("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á customer_vectors...")
        progress_bar.progress(80)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        inserted = 0
        failed = 0
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á customer_vectors table ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        with engine.connect() as conn:
            conn.execute(text("""
                CREATE TABLE IF NOT EXISTS customer_vectors (
                    id INT PRIMARY KEY,
                    name VARCHAR(100),
                    embedding LONGBLOB,
                    metadata JSON
                )
            """))
        
        with engine.begin() as conn:
            for _id, name, vector, metadata in zip(ids, texts, embeddings, metadatas):
                if vector is None:
                    failed += 1
                    continue
                
                try:
                    vector_array = np.array(vector, dtype=np.float32)
                    vector_bytes = vector_array.tobytes()
                    
                    conn.execute(
                        text("""
                            INSERT INTO customer_vectors (id, name, embedding, metadata)
                            VALUES (:id, :name, :embedding, :metadata)
                            ON DUPLICATE KEY UPDATE
                              name = VALUES(name),
                              embedding = VALUES(embedding),
                              metadata = VALUES(metadata)
                        """),
                        {
                            "id": int(_id),
                            "name": str(name)[:100],
                            "embedding": vector_bytes,
                            "metadata": json.dumps(metadata, ensure_ascii=False)
                        }
                    )
                    inserted += 1
                    
                except Exception as e:
                    failed += 1
        
        progress_bar.progress(100)
        status_text.empty()
        progress_bar.empty()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ
        st.markdown("### üéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£ Embedding")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", inserted)
        with col2:
            st.metric("‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", failed)  
        with col3:
            st.metric("üìù ‡∏£‡∏ß‡∏°", inserted + failed)
        
        if inserted > 0:
            st.markdown(f"""
            <div class="success-box">
                <h4>üéâ Embedding Process ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h4>
                <p>‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {inserted} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß</p>
            </div>
            """, unsafe_allow_html=True)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        with engine.connect() as conn:
            verify_result = conn.execute(text("SELECT COUNT(*) FROM customer_vectors"))
            total_vectors = verify_result.scalar()
            
            sample_result = conn.execute(text("SELECT id, name, LENGTH(embedding) as embedding_size FROM customer_vectors LIMIT 3"))
            
            st.subheader("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
            st.info(f"üìä ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô customer_vectors: {total_vectors} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            
            sample_data = sample_result.fetchall()
            if sample_data:
                sample_df = pd.DataFrame(sample_data, columns=['ID', 'Name', 'Embedding Size (bytes)'])
                st.dataframe(sample_df, use_container_width=True)
    
    except Exception as e:
        progress_bar.empty()
        status_text.empty()
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

if __name__ == "__main__":
    main()
