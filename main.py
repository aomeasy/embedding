import os
import pandas as pd
import numpy as np
import base64
import requests
import json
from sqlalchemy import create_engine, text
from sqlalchemy.exc import ArgumentError
from dotenv import load_dotenv
from datetime import date

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env
load_dotenv()

# --- Config (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç URL ‡πÅ‡∏•‡∏∞ Port) ---
TIDB_URL = os.getenv("TIDB_URL")
# ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç URL ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß
EMBEDDING_API_URL = os.getenv("EMBEDDING_API_URL", "http://209.15.123.47:11434/api/embeddings")
EMBEDDING_MODEL = os.getenv("EMBEDDING_MODEL", "nomic-embed-text:latest")  # ‚úÖ ‡πÉ‡∏ä‡πâ model ‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß

print("\nüîß Environment Setup")
print("üîé Raw TIDB_URL =", repr(TIDB_URL))
if TIDB_URL:
    print("üì¶ Base64 of TIDB_URL =", base64.b64encode(TIDB_URL.encode()).decode())
else:
    print("‚ùå TIDB_URL is not set! Check your environment variables.")
    exit(1)

print("üì° EMBEDDING_API_URL =", EMBEDDING_API_URL)
print("üì¶ EMBEDDING_MODEL =", EMBEDDING_MODEL)

# --- Test Connection ---
try:
    engine = create_engine(TIDB_URL)
    with engine.connect() as conn:
        result = conn.execute(text("SELECT 1"))
        print("‚úÖ Connected to TiDB:", result.scalar())
except ArgumentError as e:
    print("‚ùå Invalid TIDB_URL format:", e)
    exit(1)
except Exception as e:
    print("‚ùå Other error during DB connection:", e)
    exit(1)

# --- Load customer data ---
print("\nüì• Fetching data from customers table...")
try:
    df = pd.read_sql("SELECT id, name, email, age, city, signup_date FROM customers", con=engine)
    print(f"üî¢ Found {len(df)} rows")
except Exception as e:
    print("‚ùå Failed to fetch data:", e)
    exit(1)

if df.empty:
    print("‚ö†Ô∏è No data found. Skipping embedding.")
    exit(0)

# --- Call embedding API (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á) ---
def embed_text(texts):
    embeddings = []
    for i, t in enumerate(texts):
        headers = {"Content-Type": "application/json"}
        # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç payload ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° API ‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
        payload = {
            "model": EMBEDDING_MODEL,
            "prompt": str(t)  # ‚úÖ ‡πÉ‡∏ä‡πâ prompt ‡πÅ‡∏ó‡∏ô input ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string
        }
        try:
            print(f"üöÄ Processing {i+1}/{len(texts)}: '{t}' -> {EMBEDDING_API_URL}")
            response = requests.post(EMBEDDING_API_URL, headers=headers, json=payload, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                if "embedding" in result and result["embedding"]:
                    embeddings.append(result["embedding"])
                    print(f"‚úÖ Got embedding with {len(result['embedding'])} dimensions")
                else:
                    print("‚ö†Ô∏è No embedding returned in response")
                    embeddings.append(None)
            else:
                print(f"‚ùå API Error: {response.status_code} - {response.text}")
                embeddings.append(None)
                
        except requests.exceptions.Timeout:
            print("‚è∞ Request timeout")
            embeddings.append(None)
        except Exception as e:
            print(f"‚ùå Embedding API error: {e}")
            embeddings.append(None)
            
    return embeddings

# --- Prepare data ---
texts = df["name"].tolist()
ids = df["id"].tolist()
# ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ date
df_copy = df.copy()
df_copy["signup_date"] = df_copy["signup_date"].apply(
    lambda d: d.isoformat() if isinstance(d, (date, pd.Timestamp)) else str(d)
)
metadatas = df_copy.drop(columns=["name"]).to_dict(orient="records")

print(f"\nüîÑ Processing {len(texts)} customer names for embeddings...")

# --- Get embeddings ---
vectors = embed_text(texts)

# --- Insert into customer_vectors (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£ insert) ---
print("\nüíæ Inserting embeddings into customer_vectors...")
inserted = 0
failed = 0

# ‚úÖ ‡πÉ‡∏ä‡πâ transaction ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
with engine.begin() as conn:  # ‡πÉ‡∏ä‡πâ begin() ‡πÅ‡∏ó‡∏ô connect() ‡πÄ‡∏û‡∏∑‡πà‡∏≠ auto-commit
    for _id, name, vector, metadata in zip(ids, texts, vectors, metadatas):
        if vector is None:
            print(f"‚ö†Ô∏è Skipped id={_id} due to missing vector")
            failed += 1
            continue
            
        try:
            # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á vector ‡πÄ‡∏õ‡πá‡∏ô bytes ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            vector_array = np.array(vector, dtype=np.float32)
            vector_bytes = vector_array.tobytes()
            
            # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç SQL syntax ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MySQL/TiDB
            conn.execute(
                text("""
                    INSERT INTO customer_vectors (id, name, embedding, metadata)
                    VALUES (:id, :name, :embedding, :metadata)
                    ON DUPLICATE KEY UPDATE
                      name = VALUES(name),
                      embedding = VALUES(embedding),
                      metadata = VALUES(metadata)
                """),
                {
                    "id": int(_id), 
                    "name": str(name)[:100],  # ‚úÖ ‡∏ï‡∏±‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                    "embedding": vector_bytes, 
                    "metadata": json.dumps(metadata, ensure_ascii=False)
                }
            )
            inserted += 1
            print(f"‚úÖ Inserted id={_id}: '{name}' (vector dim: {len(vector)})")
            
        except Exception as e:
            print(f"‚ùå Insert failed for id={_id}: {e}")
            failed += 1

print(f"\nüéØ Summary:")
print(f"‚úÖ Successfully inserted: {inserted} embeddings")
print(f"‚ùå Failed: {failed} records")
print(f"üìä Total processed: {len(texts)} records")

# --- Verify insertion ---
print(f"\nüîç Verifying data in customer_vectors table...")
try:
    with engine.connect() as conn:
        count_result = conn.execute(text("SELECT COUNT(*) FROM customer_vectors"))
        total_count = count_result.scalar()
        print(f"üìä Total records in customer_vectors: {total_count}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á record ‡πÅ‡∏£‡∏Å
        sample_result = conn.execute(text("SELECT id, name, LENGTH(embedding) as embedding_size FROM customer_vectors LIMIT 3"))
        print("\nüìã Sample records:")
        for row in sample_result:
            print(f"  ID: {row[0]}, Name: '{row[1]}', Embedding size: {row[2]} bytes")
            
except Exception as e:
    print(f"‚ùå Verification failed: {e}")

print("\nüéâ Process completed!")
